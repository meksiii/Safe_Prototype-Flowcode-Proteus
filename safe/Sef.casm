;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
016E  01C9  	CLRF Wdt_Delay__0003E_1_i
016F        label24
016F  0848  	MOVF Wdt_Delay__0003E_arg_delay, W
0170  0249  	SUBWF Wdt_Delay__0003E_1_i, W
0171  1803  	BTFSC STATUS,C
0177  0AC9  	INCF Wdt_Delay__0003E_1_i, F
0178  296F  	GOTO	label24

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0173  0064  	CLRWDT

        delay_ms(1);
0174  3001  	MOVLW 0x01
0175  00CA  	MOVWF delay_ms_00000_arg_del
0176  2010  	CALL delay_ms_00000

    }
}
0172  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



/*********************************************************************
 *                  Flowcode CAL String File
 *
 * File: PIC_CAL_String.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 * 150911 | JW | Added v5 string functions
 *
 *
 */


// Useful call for finding the length of an (uncorrupted) string
#define FCI_GETLENGTH__x(str, max, idx)         for (idx = 0; idx < max; idx++) if (str[idx] == 0) break
#define FCI_STRMOV__x(str, max, dst, dlen, ix)  for (ix = 0; ix < (max) && ix < (dlen) && str[ix] != '\0'; ix++) dst[ix] = str[ix]
#define FCI_CONCATENATE(s0, l0, s1, l1, sd, ld) FCI_SHEAD(s0, l0, s1, l1, sd, ld)

#ifndef MX_USES_UINT32
	#define MX_USES_UINT32 0
#endif
#ifndef MX_USES_SINT32
	#define MX_USES_SINT32 0
#endif


#if (MX_USES_UINT32 || MX_USES_SINT32)
	#define MX_STRF_LONG
	#define MX_ULONG MX_UINT32
	#define MX_SLONG MX_SINT32
#else
	#define MX_ULONG MX_UINT16
	#define MX_SLONG MX_SINT16
#endif



//String function definitions
char FCI_GETCHAR(char* sStr1, char iStr1_len, char iPos);
char FCI_GETLENGTH(char* sStr1, char iStr1_len);
char FCI_MIDSTRING(char* sSrc, char iSrc_len, char iStart, char iCount, char* sDst, char iDst_len);
char FCI_LEFTSTRING(char* sSrc, char iSrc_len, char iCount, char* sDst, char iDst_len);
char FCI_RIGHTSTRING(char* sSrc, char iSrc_len, char iCount, char* sDst, char iDst_len);
char FCI_TOSTRING(MX_SLONG iSrc1, char* sDst, char iDst_len);
void FCI_TOLOWER(char* sSrc, char iSrc_len, char* sDst, char iDst_len);
void FCI_TOUPPER(char* sSrc, char iSrc_len, char* sDst, char iDst_len);
char FCI_COMPARE(char* sSrc1, char iSrc1_len, char* sSrc2, char iSrc2_len, char iNoCase);
char FCI_FLOAT_TO_STRING(float Number, char Precision, char* String, char MSZ_String);
char FCI_NUMBER_TO_HEX(MX_ULONG Number, char* String, char MSZ_String);
long FCI_STRING_TO_INT(char* String, char MSZ_String);
float FCI_STRING_TO_FLOAT(char* String, char MSZ_String);
// Functions for contatenation
char FCI_STRREV(char* sSrc, char iSrc_len, char* sDst, char iDst_len);
char FCI_STRMOV(char* sSrc, char iSrc_len, char* sDst, char iDst_len);
void FCI_SHEAD(char* sSrc1, char iSrc1_len, char* sSrc2, char iSrc2_len, char* sDst, char iDst_len);
void FCI_SCOPY(char* sSrc, char iSrc_len, char* sDst, char iDst_len);



char FCI_GETCHAR(char* sStr1, char iStr1_len, char iPos)
{
	char tmp;
	FCI_GETLENGTH__x(sStr1, iStr1_len, tmp);

	if(iPos < tmp)
		return sStr1[iPos];
	return '\0';
}

char FCI_GETLENGTH(char* sStr1, char iStr1_len)
{
	char tmp;
	FCI_GETLENGTH__x(sStr1, iStr1_len, tmp);
	return (tmp);
}

char FCI_MIDSTRING(char* sSrc, char iSrc_len, char iStart, char iCount, char* sDst, char iDst_len)
{
	if (iDst_len == 0) return 0;
	char idx;
	FCI_GETLENGTH__x(sSrc, iSrc_len, idx);	//find the length of the source string

	if (iStart >= idx)
	{
		*sDst = '\0';						//starting position is beyond string length, so return a null string
	}
	else
	{
		if ((iStart + iCount) >= idx)		//Make sure the required length is not too big
			iCount = idx - iStart;
		if (iCount > (iDst_len))			//make sure the required length is not too big
			iCount = (iDst_len);

		sSrc += iStart;						//Move to the correct place in the source string

		for (idx = 0; idx < iCount; idx++)	//Copy the contents of the source string
		{
			*sDst = *sSrc;
			sDst++;
			sSrc++;
		}
		if (idx < iDst_len)						//add terminating null (if we can)
			*sDst = '\0';
	}
	return (idx);
}

char FCI_LEFTSTRING(char* sSrc, char iSrc_len, char iCount, char* sDst, char iDst_len)
{
	if (iDst_len == 0) return 0;
	char idx;
	FCI_GETLENGTH__x(sSrc, iSrc_len, idx);	//find the length of the source string

	if (iCount > idx)						//make sure the required length is not too big
		iCount = idx;
	if (iCount > (iDst_len))			//make sure the required length is not too big
		iCount = (iDst_len);

	for (idx = 0; idx < iCount; idx++)		//copy the required characters
	{
		*sDst = *sSrc;
		sDst++;
		sSrc++;
	}
	if (idx < iDst_len)						//add terminating null (if we can)
		*sDst = '\0';
	return (idx);
}

char FCI_RIGHTSTRING(char* sSrc, char iSrc_len, char iCount, char* sDst, char iDst_len)
{
	if (iDst_len == 0) return 0;
	char idx;
	char delta;

	FCI_GETLENGTH__x(sSrc, iSrc_len, idx);	//find the length of the source string

	if (iCount > idx)						//make sure the required length is not too big
		iCount = idx;
	delta = idx - iCount;					//get the offset
	if (iCount > (iDst_len))				//make sure the required length is not too big
		iCount = (iDst_len);
	sSrc += delta;							//Move to the correct place in the source string

	for(idx = 0; idx < iCount; idx++)		//copy the required characters
	{
		*sDst = *sSrc;
		sDst++;
		sSrc++;
	}
	if (idx < iDst_len)						//add terminating null (if we can)
		*sDst = '\0';
	return (idx);
}

char FCI_TOSTRING(MX_SLONG iSrc1, char* sDst, char iDst_len)

{
	if (iDst_len == 0) return 0;
0179  08CC  	MOVF FCI_TOSTRI_00049_arg_iDst_len, F
017A  1D03  	BTFSS STATUS,Z
017B  297E  	GOTO	label25
017C  01D3  	CLRF CompTempVarRet2009
017E        label25

	char tmp1;

	#ifdef MX_STRF_LONG
		unsigned long top = 1000000000; 	// Maximum power of 10 less than 4294967296
017E  01CE  	CLRF FCI_TOSTRI_00049_1_top
017F  30CA  	MOVLW 0xCA
0180  00CF  	MOVWF FCI_TOSTRI_00049_1_top+D'1'
0181  309A  	MOVLW 0x9A
0182  00D0  	MOVWF FCI_TOSTRI_00049_1_top+D'2'
0183  303B  	MOVLW 0x3B
0184  00D1  	MOVWF FCI_TOSTRI_00049_1_top+D'3'

	#else
		unsigned short top = 10000; 		// Maximum power of 10 less than 65536
	#endif

	char idx = 0;
0185  01D2  	CLRF FCI_TOSTRI_00049_1_idx


	//copy source 1 into destination:
	//minus sign
	if (iSrc1 < 0)
0186  1FC9  	BTFSS FCI_TOSTRI_00049_arg_iSrc1+D'3',7
0187  299E  	GOTO	label26

	{
		sDst[0] = '-';
0188  1383  	BCF STATUS,IRP
0189  184B  	BTFSC FCI_TOSTRI_00049_arg_sDst+D'1',0
018A  1783  	BSF STATUS,IRP
018B  084A  	MOVF FCI_TOSTRI_00049_arg_sDst, W
018C  0084  	MOVWF FSR
018D  01D4  	CLRF CompTempVar2011
018E  0854  	MOVF CompTempVar2011, W
018F  0784  	ADDWF FSR, F
0190  302D  	MOVLW 0x2D
0191  0080  	MOVWF INDF

		idx++;
0192  0AD2  	INCF FCI_TOSTRI_00049_1_idx, F

		iSrc1 = -iSrc1;
0193  09C6  	COMF FCI_TOSTRI_00049_arg_iSrc1, F
0194  09C7  	COMF FCI_TOSTRI_00049_arg_iSrc1+D'1', F
0195  09C8  	COMF FCI_TOSTRI_00049_arg_iSrc1+D'2', F
0196  09C9  	COMF FCI_TOSTRI_00049_arg_iSrc1+D'3', F
0197  0FC6  	INCFSZ FCI_TOSTRI_00049_arg_iSrc1, F
0198  299E  	GOTO	label26
0199  0FC7  	INCFSZ FCI_TOSTRI_00049_arg_iSrc1+D'1', F
019A  299E  	GOTO	label26
019B  0FC8  	INCFSZ FCI_TOSTRI_00049_arg_iSrc1+D'2', F
019C  299E  	GOTO	label26
019D  0AC9  	INCF FCI_TOSTRI_00049_arg_iSrc1+D'3', F
019E        label26

	}

	tmp1 = 0;    // Nothing added yet
019E  01CD  	CLRF FCI_TOSTRI_00049_1_tmp1

	if (iSrc1 == 0) // Force showing zero
019F  0846  	MOVF FCI_TOSTRI_00049_arg_iSrc1, W
01A0  0447  	IORWF FCI_TOSTRI_00049_arg_iSrc1+D'1', W
01A1  0448  	IORWF FCI_TOSTRI_00049_arg_iSrc1+D'2', W
01A2  0449  	IORWF FCI_TOSTRI_00049_arg_iSrc1+D'3', W
01A3  39FF  	ANDLW 0xFF
01A4  1D03  	BTFSS STATUS,Z
01A5  29AC  	GOTO	label27
01AC        label27

	{
		tmp1 = 1;
01A6  3001  	MOVLW 0x01
01A7  00CD  	MOVWF FCI_TOSTRI_00049_1_tmp1

		top = 1;
01A8  00CE  	MOVWF FCI_TOSTRI_00049_1_top
01A9  01CF  	CLRF FCI_TOSTRI_00049_1_top+D'1'
01AA  01D0  	CLRF FCI_TOSTRI_00049_1_top+D'2'
01AB  01D1  	CLRF FCI_TOSTRI_00049_1_top+D'3'

	}
	while (( idx < iDst_len) && (top > 0))
01AC  084C  	MOVF FCI_TOSTRI_00049_arg_iDst_len, W
01AD  0252  	SUBWF FCI_TOSTRI_00049_1_idx, W
01AE  1803  	BTFSC STATUS,C
01AF  2A2F  	GOTO	label32
01B0  0851  	MOVF FCI_TOSTRI_00049_1_top+D'3', W
01B1  3C00  	SUBLW 0x00
01B2  1D03  	BTFSS STATUS,Z
01B3  29BE  	GOTO	label28
01B4  0850  	MOVF FCI_TOSTRI_00049_1_top+D'2', W
01B5  3C00  	SUBLW 0x00
01B6  1D03  	BTFSS STATUS,Z
01B7  29BE  	GOTO	label28
01B8  084F  	MOVF FCI_TOSTRI_00049_1_top+D'1', W
01B9  3C00  	SUBLW 0x00
01BA  1D03  	BTFSS STATUS,Z
01BB  29BE  	GOTO	label28
01BC  084E  	MOVF FCI_TOSTRI_00049_1_top, W
01BD  3C00  	SUBLW 0x00
01BE        label28
01BE  1803  	BTFSC STATUS,C
01BF  2A2F  	GOTO	label32
022E  29AC  	GOTO	label27
022F        label32

	{
		#ifdef MX_STRF_LONG
		if (((unsigned long)iSrc1 >= top) || (tmp1))
01C0  0851  	MOVF FCI_TOSTRI_00049_1_top+D'3', W
01C1  0249  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'3', W
01C2  1D03  	BTFSS STATUS,Z
01C3  29CE  	GOTO	label29
01C4  0850  	MOVF FCI_TOSTRI_00049_1_top+D'2', W
01C5  0248  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'2', W
01C6  1D03  	BTFSS STATUS,Z
01C7  29CE  	GOTO	label29
01C8  084F  	MOVF FCI_TOSTRI_00049_1_top+D'1', W
01C9  0247  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'1', W
01CA  1D03  	BTFSS STATUS,Z
01CB  29CE  	GOTO	label29
01CC  084E  	MOVF FCI_TOSTRI_00049_1_top, W
01CD  0246  	SUBWF FCI_TOSTRI_00049_arg_iSrc1, W
01CE        label29
01CE  1803  	BTFSC STATUS,C
01CF  29D3  	GOTO	label30
01D0  08CD  	MOVF FCI_TOSTRI_00049_1_tmp1, F
01D1  1903  	BTFSC STATUS,Z
01D2  2A18  	GOTO	label31
01D3        label30
0218        label31

		#else
		if (((unsigned)iSrc1 >= top) || (tmp1))
		#endif
		{
			#ifdef MX_STRF_LONG
			tmp1 = (unsigned long)iSrc1 / top;	// Top digit
01D3  0846  	MOVF FCI_TOSTRI_00049_arg_iSrc1, W
01D4  00D4  	MOVWF __div_32_3_00001_arg_a
01D5  0847  	MOVF FCI_TOSTRI_00049_arg_iSrc1+D'1', W
01D6  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
01D7  0848  	MOVF FCI_TOSTRI_00049_arg_iSrc1+D'2', W
01D8  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
01D9  0849  	MOVF FCI_TOSTRI_00049_arg_iSrc1+D'3', W
01DA  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
01DB  084E  	MOVF FCI_TOSTRI_00049_1_top, W
01DC  00D8  	MOVWF __div_32_3_00001_arg_b
01DD  084F  	MOVF FCI_TOSTRI_00049_1_top+D'1', W
01DE  00D9  	MOVWF __div_32_3_00001_arg_b+D'1'
01DF  0850  	MOVF FCI_TOSTRI_00049_1_top+D'2', W
01E0  00DA  	MOVWF __div_32_3_00001_arg_b+D'2'
01E1  0851  	MOVF FCI_TOSTRI_00049_1_top+D'3', W
01E2  00DB  	MOVWF __div_32_3_00001_arg_b+D'3'
01E3  20C6  	CALL __div_32_3_00001
01E4  0861  	MOVF CompTempVarRet210, W
01E5  00CD  	MOVWF FCI_TOSTRI_00049_1_tmp1

			#else
			tmp1 = (unsigned)iSrc1 / top;	// Top digit
			#endif
			sDst[idx] = '0' + tmp1;			// Add digit to buffer
01E6  084D  	MOVF FCI_TOSTRI_00049_1_tmp1, W
01E7  3E30  	ADDLW 0x30
01E8  00D4  	MOVWF CompTempVar2017
01E9  1383  	BCF STATUS,IRP
01EA  184B  	BTFSC FCI_TOSTRI_00049_arg_sDst+D'1',0
01EB  1783  	BSF STATUS,IRP
01EC  084A  	MOVF FCI_TOSTRI_00049_arg_sDst, W
01ED  0752  	ADDWF FCI_TOSTRI_00049_1_idx, W
01EE  0084  	MOVWF FSR
01EF  0854  	MOVF CompTempVar2017, W
01F0  0080  	MOVWF INDF

			idx++;
01F1  0AD2  	INCF FCI_TOSTRI_00049_1_idx, F

			iSrc1 -= tmp1 * top;			// Remove digit
01F2  084D  	MOVF FCI_TOSTRI_00049_1_tmp1, W
01F3  00D4  	MOVWF __mul_32u__0000F_arg_a
01F4  01D5  	CLRF __mul_32u__0000F_arg_a+D'1'
01F5  01D6  	CLRF __mul_32u__0000F_arg_a+D'2'
01F6  01D7  	CLRF __mul_32u__0000F_arg_a+D'3'
01F7  084E  	MOVF FCI_TOSTRI_00049_1_top, W
01F8  00D8  	MOVWF __mul_32u__0000F_arg_b
01F9  084F  	MOVF FCI_TOSTRI_00049_1_top+D'1', W
01FA  00D9  	MOVWF __mul_32u__0000F_arg_b+D'1'
01FB  0850  	MOVF FCI_TOSTRI_00049_1_top+D'2', W
01FC  00DA  	MOVWF __mul_32u__0000F_arg_b+D'2'
01FD  0851  	MOVF FCI_TOSTRI_00049_1_top+D'3', W
01FE  00DB  	MOVWF __mul_32u__0000F_arg_b+D'3'
01FF  20A3  	CALL __mul_32u__0000F
0200  0861  	MOVF CompTempVarRet464, W
0201  00DC  	MOVWF CompTempVar2018
0202  0862  	MOVF CompTempVarRet464+D'1', W
0203  00DD  	MOVWF CompTempVar2019
0204  0863  	MOVF CompTempVarRet464+D'2', W
0205  00DE  	MOVWF CompTempVar2020
0206  0864  	MOVF CompTempVarRet464+D'3', W
0207  00DF  	MOVWF CompTempVar2021
0208  085C  	MOVF CompTempVar2018, W
0209  02C6  	SUBWF FCI_TOSTRI_00049_arg_iSrc1, F
020A  085D  	MOVF CompTempVar2019, W
020B  1C03  	BTFSS STATUS,C
020C  0F5D  	INCFSZ CompTempVar2019, W
020D  02C7  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'1', F
020E  085E  	MOVF CompTempVar2020, W
020F  1C03  	BTFSS STATUS,C
0210  0F5E  	INCFSZ CompTempVar2020, W
0211  02C8  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'2', F
0212  085F  	MOVF CompTempVar2021, W
0213  1C03  	BTFSS STATUS,C
0214  0F5F  	INCFSZ CompTempVar2021, W
0215  02C9  	SUBWF FCI_TOSTRI_00049_arg_iSrc1+D'3', F

			tmp1 = 1;						// Add zeros now
0216  3001  	MOVLW 0x01
0217  00CD  	MOVWF FCI_TOSTRI_00049_1_tmp1

		}
		top /= 10;							// Go to next digit
0218  084E  	MOVF FCI_TOSTRI_00049_1_top, W
0219  00D4  	MOVWF __div_32_3_00001_arg_a
021A  084F  	MOVF FCI_TOSTRI_00049_1_top+D'1', W
021B  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
021C  0850  	MOVF FCI_TOSTRI_00049_1_top+D'2', W
021D  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
021E  0851  	MOVF FCI_TOSTRI_00049_1_top+D'3', W
021F  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
0220  300A  	MOVLW 0x0A
0221  00D8  	MOVWF __div_32_3_00001_arg_b
0222  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
0223  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
0224  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
0225  20C6  	CALL __div_32_3_00001
0226  0861  	MOVF CompTempVarRet210, W
0227  00CE  	MOVWF FCI_TOSTRI_00049_1_top
0228  0862  	MOVF CompTempVarRet210+D'1', W
0229  00CF  	MOVWF FCI_TOSTRI_00049_1_top+D'1'
022A  0863  	MOVF CompTempVarRet210+D'2', W
022B  00D0  	MOVWF FCI_TOSTRI_00049_1_top+D'2'
022C  0864  	MOVF CompTempVarRet210+D'3', W
022D  00D1  	MOVWF FCI_TOSTRI_00049_1_top+D'3'

	}

	if (idx < iDst_len)						//add terminating null (if we can)
022F  084C  	MOVF FCI_TOSTRI_00049_arg_iDst_len, W
0230  0252  	SUBWF FCI_TOSTRI_00049_1_idx, W
0231  1803  	BTFSC STATUS,C
0232  2A3B  	GOTO	label33
023B        label33

		sDst[idx] = '\0';
0233  1383  	BCF STATUS,IRP
0234  184B  	BTFSC FCI_TOSTRI_00049_arg_sDst+D'1',0
0235  1783  	BSF STATUS,IRP
0236  084A  	MOVF FCI_TOSTRI_00049_arg_sDst, W
0237  0752  	ADDWF FCI_TOSTRI_00049_1_idx, W
0238  0084  	MOVWF FSR
0239  3000  	MOVLW 0x00
023A  0080  	MOVWF INDF

	return (idx);
023B  0852  	MOVF FCI_TOSTRI_00049_1_idx, W
023C  00D3  	MOVWF CompTempVarRet2009

}
017D  0008  	RETURN
023D  0008  	RETURN




void FCI_TOLOWER(char* sSrc, char iSrc_len, char* sDst, char iDst_len)
{
	if (iDst_len == 0) return;
	char idx;
	char ch;

	if (iSrc_len < iDst_len) iSrc_len = iDst_len; // Bound so cant overflow dest
	//copy source into destination and change to lower case
	for (idx=0; idx<iSrc_len; idx++)
	{
		ch = sSrc[idx];
		if ((ch >= 'A') && (ch <= 'Z'))
		{
			ch ^= 0x20;
		}
		sDst[idx] = ch;
		if (ch == 0)
		{
			break;
		}
	}
	if (idx < iDst_len)						//add terminating null (if we can)
		*sDst = '\0';
}

void FCI_TOUPPER(char* sSrc, char iSrc_len, char* sDst, char iDst_len)
{
	if (iDst_len == 0) return;
	char idx;
	char ch;

	if (iSrc_len < iDst_len) iSrc_len = iDst_len; // Bound so cant overflow dest
	//copy source into destination and change to upper case
	for (idx=0; idx<iSrc_len; idx++)
	{
		ch = sSrc[idx];
		if ((ch >= 'a') && (ch <= 'z'))
		{
			ch ^= 0x20;
		}
		sDst[idx] = ch;
		if (ch == 0)
		{
			break;
		}
	}
	if (idx < iDst_len)						//add terminating null (if we can)
		*sDst = '\0';
}

char FCI_COMPARE(char* sSrc1, char iSrc1_len, char* sSrc2, char iSrc2_len, char iNoCase)

{
	char iRetVal = 0;
06E2  01CD  	CLRF FCI_COMPAR_0004C_1_iRetVal

	char idx;
	char ch1, ch2;

	for (idx=0; idx < iSrc1_len; idx++)	//compare a byte from the strings
06E3  01CE  	CLRF FCI_COMPAR_0004C_1_idx
06E4        label66
06E4  0848  	MOVF FCI_COMPAR_0004C_arg_iSrc1_len, W
06E5  024E  	SUBWF FCI_COMPAR_0004C_1_idx, W
06E6  1803  	BTFSC STATUS,C
06E7  2F37  	GOTO	label74
0735  0ACE  	INCF FCI_COMPAR_0004C_1_idx, F
0736  2EE4  	GOTO	label66
0737        label74

	{
		if (idx < iSrc2_len)
06E8  084B  	MOVF FCI_COMPAR_0004C_arg_iSrc2_len, W
06E9  024E  	SUBWF FCI_COMPAR_0004C_1_idx, W
06EA  1803  	BTFSC STATUS,C
06EB  2F28  	GOTO	label71
0728        label71

		{
			ch1 = *sSrc1;
06EC  1383  	BCF STATUS,IRP
06ED  1847  	BTFSC FCI_COMPAR_0004C_arg_sSrc1+D'1',0
06EE  1783  	BSF STATUS,IRP
06EF  0846  	MOVF FCI_COMPAR_0004C_arg_sSrc1, W
06F0  0084  	MOVWF FSR
06F1  0800  	MOVF INDF, W
06F2  00CF  	MOVWF FCI_COMPAR_0004C_1_ch1

			ch2 = *sSrc2;
06F3  1383  	BCF STATUS,IRP
06F4  184A  	BTFSC FCI_COMPAR_0004C_arg_sSrc2+D'1',0
06F5  1783  	BSF STATUS,IRP
06F6  0849  	MOVF FCI_COMPAR_0004C_arg_sSrc2, W
06F7  0084  	MOVWF FSR
06F8  0800  	MOVF INDF, W
06F9  00D0  	MOVWF FCI_COMPAR_0004C_1_ch2


			if (iNoCase)
06FA  08CC  	MOVF FCI_COMPAR_0004C_arg_iNoCase, F
06FB  1903  	BTFSC STATUS,Z
06FC  2F13  	GOTO	label68

			{
				if ((ch1 >= 'a') && (ch1 <= 'z'))
06FD  3061  	MOVLW 0x61
06FE  024F  	SUBWF FCI_COMPAR_0004C_1_ch1, W
06FF  1C03  	BTFSS STATUS,C
0700  2F08  	GOTO	label67
0701  084F  	MOVF FCI_COMPAR_0004C_1_ch1, W
0702  3C7A  	SUBLW 0x7A
0703  1C03  	BTFSS STATUS,C
0704  2F08  	GOTO	label67
0708        label67

					ch1 = (ch1 & 0xDF);
0705  30DF  	MOVLW 0xDF
0706  054F  	ANDWF FCI_COMPAR_0004C_1_ch1, W
0707  00CF  	MOVWF FCI_COMPAR_0004C_1_ch1


				if ((ch2 >= 'a') && (ch2 <= 'z'))
0708  3061  	MOVLW 0x61
0709  0250  	SUBWF FCI_COMPAR_0004C_1_ch2, W
070A  1C03  	BTFSS STATUS,C
070B  2F13  	GOTO	label68
070C  0850  	MOVF FCI_COMPAR_0004C_1_ch2, W
070D  3C7A  	SUBLW 0x7A
070E  1C03  	BTFSS STATUS,C
070F  2F13  	GOTO	label68
0713        label68

					ch2 = (ch2 & 0xDF);
0710  30DF  	MOVLW 0xDF
0711  0550  	ANDWF FCI_COMPAR_0004C_1_ch2, W
0712  00D0  	MOVWF FCI_COMPAR_0004C_1_ch2


			}

			if (ch1 < ch2)
0713  0850  	MOVF FCI_COMPAR_0004C_1_ch2, W
0714  024F  	SUBWF FCI_COMPAR_0004C_1_ch1, W
0715  1803  	BTFSC STATUS,C
0716  2F1A  	GOTO	label69
071A        label69

			{
				return(255);
0717  30FF  	MOVLW 0xFF
0718  00D1  	MOVWF CompTempVarRet2027

			}
			else if (ch1 > ch2)
071A  084F  	MOVF FCI_COMPAR_0004C_1_ch1, W
071B  0250  	SUBWF FCI_COMPAR_0004C_1_ch2, W
071C  1803  	BTFSC STATUS,C
071D  2F21  	GOTO	label70
0721        label70

			{
				return(1);
071E  3001  	MOVLW 0x01
071F  00D1  	MOVWF CompTempVarRet2027

			}

			sSrc1++;
0721  0AC6  	INCF FCI_COMPAR_0004C_arg_sSrc1, F
0722  1903  	BTFSC STATUS,Z
0723  0AC7  	INCF FCI_COMPAR_0004C_arg_sSrc1+D'1', F

			sSrc2++;
0724  0AC9  	INCF FCI_COMPAR_0004C_arg_sSrc2, F
0725  1903  	BTFSC STATUS,Z
0726  0ACA  	INCF FCI_COMPAR_0004C_arg_sSrc2+D'1', F

		}
		else
0727  2F35  	GOTO	label73
0735        label73

		{
			if (*sSrc1 == 0)
0728  1383  	BCF STATUS,IRP
0729  1847  	BTFSC FCI_COMPAR_0004C_arg_sSrc1+D'1',0
072A  1783  	BSF STATUS,IRP
072B  0846  	MOVF FCI_COMPAR_0004C_arg_sSrc1, W
072C  0084  	MOVWF FSR
072D  0880  	MOVF INDF, F
072E  1D03  	BTFSS STATUS,Z
072F  2F32  	GOTO	label72
0732        label72

				return (0);				//end of source1 as well, so ok
0730  01D1  	CLRF CompTempVarRet2027

			else
				return (1);				//reached the end of iSrc2, but still more of iSrc1
0732  3001  	MOVLW 0x01
0733  00D1  	MOVWF CompTempVarRet2027

		}
	}

	if (iSrc1_len == iSrc2_len)			//reached the end of iSrc1.  If we're also at the end of iSrc2, then return 0
0737  084B  	MOVF FCI_COMPAR_0004C_arg_iSrc2_len, W
0738  0648  	XORWF FCI_COMPAR_0004C_arg_iSrc1_len, W
0739  1D03  	BTFSS STATUS,Z
073A  2F3D  	GOTO	label75
073D        label75

		return (0);
073B  01D1  	CLRF CompTempVarRet2027

	else
	{
		if (*sSrc2 == 0)
073D  1383  	BCF STATUS,IRP
073E  184A  	BTFSC FCI_COMPAR_0004C_arg_sSrc2+D'1',0
073F  1783  	BSF STATUS,IRP
0740  0849  	MOVF FCI_COMPAR_0004C_arg_sSrc2, W
0741  0084  	MOVWF FSR
0742  0880  	MOVF INDF, F
0743  1D03  	BTFSS STATUS,Z
0744  2F47  	GOTO	label76
0747        label76

			return (0);					//end of source1 as well, so ok
0745  01D1  	CLRF CompTempVarRet2027

		else
			return (255);				//not at end of source2, so return -1
0747  30FF  	MOVLW 0xFF
0748  00D1  	MOVWF CompTempVarRet2027

	}
}
0719  0008  	RETURN
0720  0008  	RETURN
0731  0008  	RETURN
0734  0008  	RETURN
073C  0008  	RETURN
0746  0008  	RETURN
0749  0008  	RETURN



char FCI_FLOAT_TO_STRING(float Number, char Precision, char* String, char MSZ_String)
{
	int whole;
	char str_length;
	char idx;
	char stringidx = 0;
	float real, temp;
	char old;
	char temp_string[10];

	#ifdef _BOOSTC									//BoostC Floating Point

		float_rounding_mode = 3;					//Always round to zero
		whole = float32_to_int32(Number);			//Convert to whole integer
		temp = float32_from_int32(whole);			//Convert whole number back to floating point

		if (float32_ge(Number,0))
		{
			real = float32_sub(Number, temp);		//Subtract whole number from floating point number
		}
		else
		{
			if (whole == 0)							//Fix -0 bug
			{
				String[stringidx] = '-';
				stringidx = stringidx + 1;
			}

			real = float32_sub(temp, Number);		//Subtract floating point number from whole number
		}
	#endif

	#ifdef HI_TECH_C								//HiTECH Floating Point

		whole = (int)Number;						//Convert to whole integer
		temp = whole;								//Convert whole number back to floating point

		if (Number >= 0)
		{
			real = Number - temp;					//Subtract whole number from floating point number
		}
		else
		{
			if (whole == 0)							//Fix -0 bug
			{
				String[stringidx] = '-';
				stringidx = stringidx + 1;
			}

			real = temp - Number;					//Subtract floating point number from whole number
		}
	#endif

	str_length = FCI_TOSTRING(whole, temp_string, 5);		//Convert integer numbers to strings

	for (idx=0; idx<str_length; idx++)						//Copy whole part of number to string
	{
		if(stringidx < MSZ_String)
		{
			String[stringidx] = temp_string[idx];
			stringidx = stringidx + 1;
		}
	}

	if(stringidx < MSZ_String)						//Add decimal point to string
	{
		String[stringidx] = '.';
		stringidx = stringidx + 1;
	}

	for (idx = 0; idx < Precision; idx++)			//Output Real Part Of Number
	{
		if (stringidx >= MSZ_String)
			break;

		#ifdef _BOOSTC								//BoostC Floating Point
			real = float32_mul(real, 10);
			whole = float32_to_int32(real);			//Convert to whole integer
			temp = float32_from_int32(whole);		//Convert whole number back to floating point
			real = float32_sub(real, temp);			//Subtract whole number from floating point number
		#endif
		#ifdef HI_TECH_C							//HiTECH Floating Point
			real = real * 10;
			whole = (int)real;						//Convert to whole integer
			temp = whole;							//Convert whole number back to floating point
			real = real - temp;						//Subtract whole number from floating point number
		#endif

		String[stringidx] = '0' + whole;
		stringidx = stringidx + 1;
	}

	if(stringidx < MSZ_String)									//Add null termination to string
	{
		String[stringidx] = 0;
	}

	return stringidx;
}











char FCI_NUMBER_TO_HEX(MX_ULONG Number, char* String, char MSZ_String)
{
	char stringidx;
	char idx = 0;
	char temp;
	char digit[8] = {0,0,0,0,0,0,0,0};

	#ifdef MX_STRF_LONG
		unsigned long num = Number;
	#else
		unsigned int num = Number;
	#endif

	//Check that output string is long enough to store result
	if((Number > 0xFFFF) && (MSZ_String < 10))
		return 0;

	if((Number > 0xFF) && (MSZ_String < 6))
		return 0;

	if((Number <= 0xFF) && (MSZ_String < 4))
		return 0;

	//Initialise start of string with hexadecimal indicator
	String[0] = '0';
	String[1] = 'x';

	//Calculate hex values
	do
	{
		temp = num % 16;
		num = num >> 4;

		if(temp > 9)
		{
			temp = temp - 10;
			digit[idx] = temp + 'A';
		}
		else
			digit[idx] = temp + '0';

		idx = idx + 1;
	} while (num > 0);

	//Copy Hex values over to output string
	for (stringidx = 2; stringidx < (idx + 2); stringidx++)
		String[stringidx] = digit[idx - (stringidx - 1)];

	//Add null termination to string
	if(stringidx < MSZ_String)
	{
		String[stringidx] = 0;
	}

	return stringidx;
}


long FCI_STRING_TO_INT(char* String, char MSZ_String)

{
	char bNegative = 0;
023E  01C9  	CLRF FCI_STRING_0004F_1_bNegative

	char idx = 0;
023F  01CA  	CLRF FCI_STRING_0004F_1_idx

	long RetVal = 0;
0240  01CB  	CLRF FCI_STRING_0004F_1_RetVal
0241  01CC  	CLRF FCI_STRING_0004F_1_RetVal+D'1'
0242  01CD  	CLRF FCI_STRING_0004F_1_RetVal+D'2'
0243  01CE  	CLRF FCI_STRING_0004F_1_RetVal+D'3'


	//Is number negative
	if(String[0] == '-')
0244  1383  	BCF STATUS,IRP
0245  1847  	BTFSC FCI_STRING_0004F_arg_String+D'1',0
0246  1783  	BSF STATUS,IRP
0247  0846  	MOVF FCI_STRING_0004F_arg_String, W
0248  0084  	MOVWF FSR
0249  01CF  	CLRF CompTempVar2063
024A  084F  	MOVF CompTempVar2063, W
024B  0784  	ADDWF FSR, F
024C  0800  	MOVF INDF, W
024D  3A2D  	XORLW 0x2D
024E  1D03  	BTFSS STATUS,Z
024F  2A53  	GOTO	label34
0253        label34

	{
		bNegative = 1;
0250  3001  	MOVLW 0x01
0251  00C9  	MOVWF FCI_STRING_0004F_1_bNegative

		idx = 1;
0252  00CA  	MOVWF FCI_STRING_0004F_1_idx

	}

	//While string contains a valid number
	while (idx < MSZ_String && String[idx] >= '0' && String[idx] <= '9')
0253  0848  	MOVF FCI_STRING_0004F_arg_MSZ_String, W
0254  024A  	SUBWF FCI_STRING_0004F_1_idx, W
0255  1803  	BTFSC STATUS,C
0256  2AAE  	GOTO	label35
0257  1383  	BCF STATUS,IRP
0258  1847  	BTFSC FCI_STRING_0004F_arg_String+D'1',0
0259  1783  	BSF STATUS,IRP
025A  0846  	MOVF FCI_STRING_0004F_arg_String, W
025B  074A  	ADDWF FCI_STRING_0004F_1_idx, W
025C  0084  	MOVWF FSR
025D  3030  	MOVLW 0x30
025E  0200  	SUBWF INDF, W
025F  1C03  	BTFSS STATUS,C
0260  2AAE  	GOTO	label35
0261  1383  	BCF STATUS,IRP
0262  1847  	BTFSC FCI_STRING_0004F_arg_String+D'1',0
0263  1783  	BSF STATUS,IRP
0264  0846  	MOVF FCI_STRING_0004F_arg_String, W
0265  074A  	ADDWF FCI_STRING_0004F_1_idx, W
0266  0084  	MOVWF FSR
0267  0800  	MOVF INDF, W
0268  3C39  	SUBLW 0x39
0269  1C03  	BTFSS STATUS,C
026A  2AAE  	GOTO	label35
02AD  2A53  	GOTO	label34
02AE        label35

	{
		//Pull character from string and add to running total
		RetVal = (long) RetVal * 10;
026B  084B  	MOVF FCI_STRING_0004F_1_RetVal, W
026C  00D4  	MOVWF __mul_32u__0000F_arg_a
026D  084C  	MOVF FCI_STRING_0004F_1_RetVal+D'1', W
026E  00D5  	MOVWF __mul_32u__0000F_arg_a+D'1'
026F  084D  	MOVF FCI_STRING_0004F_1_RetVal+D'2', W
0270  00D6  	MOVWF __mul_32u__0000F_arg_a+D'2'
0271  084E  	MOVF FCI_STRING_0004F_1_RetVal+D'3', W
0272  00D7  	MOVWF __mul_32u__0000F_arg_a+D'3'
0273  300A  	MOVLW 0x0A
0274  00D8  	MOVWF __mul_32u__0000F_arg_b
0275  01D9  	CLRF __mul_32u__0000F_arg_b+D'1'
0276  01DA  	CLRF __mul_32u__0000F_arg_b+D'2'
0277  01DB  	CLRF __mul_32u__0000F_arg_b+D'3'
0278  20A3  	CALL __mul_32u__0000F
0279  0861  	MOVF CompTempVarRet464, W
027A  00DC  	MOVWF CompTempVar2071
027B  0862  	MOVF CompTempVarRet464+D'1', W
027C  00DD  	MOVWF CompTempVar2072
027D  0863  	MOVF CompTempVarRet464+D'2', W
027E  00DE  	MOVWF CompTempVar2073
027F  0864  	MOVF CompTempVarRet464+D'3', W
0280  00DF  	MOVWF CompTempVar2074
0281  085C  	MOVF CompTempVar2071, W
0282  00CB  	MOVWF FCI_STRING_0004F_1_RetVal
0283  085D  	MOVF CompTempVar2072, W
0284  00CC  	MOVWF FCI_STRING_0004F_1_RetVal+D'1'
0285  085E  	MOVF CompTempVar2073, W
0286  00CD  	MOVWF FCI_STRING_0004F_1_RetVal+D'2'
0287  085F  	MOVF CompTempVar2074, W
0288  00CE  	MOVWF FCI_STRING_0004F_1_RetVal+D'3'

		RetVal = (long) RetVal + (String[idx] - '0');
0289  1383  	BCF STATUS,IRP
028A  1847  	BTFSC FCI_STRING_0004F_arg_String+D'1',0
028B  1783  	BSF STATUS,IRP
028C  0846  	MOVF FCI_STRING_0004F_arg_String, W
028D  074A  	ADDWF FCI_STRING_0004F_1_idx, W
028E  0084  	MOVWF FSR
028F  3030  	MOVLW 0x30
0290  0200  	SUBWF INDF, W
0291  00D0  	MOVWF CompTempVar2077
0292  01D1  	CLRF CompTempVar2078
0293  01D2  	CLRF CompTempVar2079
0294  01D3  	CLRF CompTempVar2080
0295  084B  	MOVF FCI_STRING_0004F_1_RetVal, W
0296  07D0  	ADDWF CompTempVar2077, F
0297  084C  	MOVF FCI_STRING_0004F_1_RetVal+D'1', W
0298  1803  	BTFSC STATUS,C
0299  0F4C  	INCFSZ FCI_STRING_0004F_1_RetVal+D'1', W
029A  07D1  	ADDWF CompTempVar2078, F
029B  084D  	MOVF FCI_STRING_0004F_1_RetVal+D'2', W
029C  1803  	BTFSC STATUS,C
029D  0F4D  	INCFSZ FCI_STRING_0004F_1_RetVal+D'2', W
029E  07D2  	ADDWF CompTempVar2079, F
029F  084E  	MOVF FCI_STRING_0004F_1_RetVal+D'3', W
02A0  1803  	BTFSC STATUS,C
02A1  0F4E  	INCFSZ FCI_STRING_0004F_1_RetVal+D'3', W
02A2  07D3  	ADDWF CompTempVar2080, F
02A3  0850  	MOVF CompTempVar2077, W
02A4  00CB  	MOVWF FCI_STRING_0004F_1_RetVal
02A5  0851  	MOVF CompTempVar2078, W
02A6  00CC  	MOVWF FCI_STRING_0004F_1_RetVal+D'1'
02A7  0852  	MOVF CompTempVar2079, W
02A8  00CD  	MOVWF FCI_STRING_0004F_1_RetVal+D'2'
02A9  0853  	MOVF CompTempVar2080, W
02AA  00CE  	MOVWF FCI_STRING_0004F_1_RetVal+D'3'

		idx = idx + 1;
02AB  0A4A  	INCF FCI_STRING_0004F_1_idx, W
02AC  00CA  	MOVWF FCI_STRING_0004F_1_idx

	}

	if (bNegative)
02AE  08C9  	MOVF FCI_STRING_0004F_1_bNegative, F
02AF  1903  	BTFSC STATUS,Z
02B0  2ACC  	GOTO	label36
02CC        label36

		RetVal = (long) 0 - RetVal;
02B1  084B  	MOVF FCI_STRING_0004F_1_RetVal, W
02B2  3C00  	SUBLW 0x00
02B3  00D0  	MOVWF CompTempVar2081
02B4  3000  	MOVLW 0x00
02B5  00D1  	MOVWF CompTempVar2082
02B6  00D2  	MOVWF CompTempVar2083
02B7  00D3  	MOVWF CompTempVar2084
02B8  084C  	MOVF FCI_STRING_0004F_1_RetVal+D'1', W
02B9  1C03  	BTFSS STATUS,C
02BA  0F4C  	INCFSZ FCI_STRING_0004F_1_RetVal+D'1', W
02BB  02D1  	SUBWF CompTempVar2082, F
02BC  084D  	MOVF FCI_STRING_0004F_1_RetVal+D'2', W
02BD  1C03  	BTFSS STATUS,C
02BE  0F4D  	INCFSZ FCI_STRING_0004F_1_RetVal+D'2', W
02BF  02D2  	SUBWF CompTempVar2083, F
02C0  084E  	MOVF FCI_STRING_0004F_1_RetVal+D'3', W
02C1  1C03  	BTFSS STATUS,C
02C2  0F4E  	INCFSZ FCI_STRING_0004F_1_RetVal+D'3', W
02C3  02D3  	SUBWF CompTempVar2084, F
02C4  0850  	MOVF CompTempVar2081, W
02C5  00CB  	MOVWF FCI_STRING_0004F_1_RetVal
02C6  0851  	MOVF CompTempVar2082, W
02C7  00CC  	MOVWF FCI_STRING_0004F_1_RetVal+D'1'
02C8  0852  	MOVF CompTempVar2083, W
02C9  00CD  	MOVWF FCI_STRING_0004F_1_RetVal+D'2'
02CA  0853  	MOVF CompTempVar2084, W
02CB  00CE  	MOVWF FCI_STRING_0004F_1_RetVal+D'3'


	return RetVal;
02CC  084B  	MOVF FCI_STRING_0004F_1_RetVal, W
02CD  00D0  	MOVWF CompTempVarRet2061
02CE  084C  	MOVF FCI_STRING_0004F_1_RetVal+D'1', W
02CF  00D1  	MOVWF CompTempVarRet2061+D'1'
02D0  084D  	MOVF FCI_STRING_0004F_1_RetVal+D'2', W
02D1  00D2  	MOVWF CompTempVarRet2061+D'2'
02D2  084E  	MOVF FCI_STRING_0004F_1_RetVal+D'3', W
02D3  00D3  	MOVWF CompTempVarRet2061+D'3'

}
02D4  0008  	RETURN



float FCI_STRING_TO_FLOAT(char* String, char MSZ_String)
{
	float RetVal = 0;
	float real_divider = 1;
	unsigned long whole, real;			//Changed from INT 23/07/10
	char idx = 0;
	char idx2 = 0;
	char offset = 0;
	char bNegative = 0;
	char Comp_String[8];

	//Is number negative
	if(String[0] == '-')
	{
		bNegative = 1;
		offset = 1;
	}

	//Scan for decimal point
	for(idx=offset; idx<MSZ_String; idx++)
	{
		if(String[idx] == '.')
			break;
	}

	//Convert whole portion of number from string
	whole = FCI_STRING_TO_INT (String, idx);

	//No decimal point found
	if(idx == MSZ_String)
	{
		#ifdef _BOOSTC
			RetVal = float32_from_int32(whole);
		#endif
		#ifdef HI_TECH_C
			RetVal = (int)whole;
		#endif
		return RetVal;
	}

	//Collect real portion of number into new string
	offset = idx + 1;
	for(idx=offset; idx<MSZ_String; idx++)
	{
		if(String[idx] >= '0' && String[idx] <= '9')
		{
			Comp_String[idx - offset] = String[idx];
			#ifdef _BOOSTC
				real_divider = float32_mul(real_divider, 0.1);
			#endif
			#ifdef HI_TECH_C
				real_divider = real_divider * 0.1;
			#endif
		}
		else
			break;
	}

	//Convert real portion of number from string
	real = FCI_STRING_TO_INT (Comp_String, (idx - offset));

	//Adjust weighting of values and combine into one float variable
	#ifdef _BOOSTC

		RetVal = float32_from_int32(real);
		RetVal = float32_mul(RetVal, real_divider);
		real_divider = float32_from_int32(whole);
		RetVal = float32_add(RetVal, real_divider);

		if (bNegative)
			RetVal = float32_sub(0, RetVal);

	#endif
	#ifdef HI_TECH_C

		RetVal = (float)real;
		RetVal = RetVal * real_divider;
		real_divider = (float)whole;
		RetVal = RetVal + real_divider;

		if (bNegative)
			RetVal = 0 - RetVal;
	#endif

	return RetVal;
}



/*=----------------------------------------------------------------------=*\
   Use :Move but do not null-terminate sSrc to sDst, max len iSrc_len
       :This differs from FCI_STRMOV() in that the bytes are copied from the
       :end of the string to the start
       :Returns length of copy
\*=----------------------------------------------------------------------=*/
char FCI_STRREV(char* sSrc, char iSrc_len, char* sDst, char iDst_len)
{
  char ix, len;
  FCI_GETLENGTH__x(sSrc, iSrc_len, len);
  if (len > iDst_len)
  {
    len = iDst_len;
  }
  ix = len;
  while (ix > 0)
  {
    ix--;
    sDst[ix] = sSrc[ix];
  }
  // No null terminate
  // Return length of string
  return len;
}


/*=----------------------------------------------------------------------=*\
   Use :Move but do not null-terminate sSrc to sDst, max len iSrc_len
       :Returns length of copy
\*=----------------------------------------------------------------------=*/
char FCI_STRMOV(char* sSrc, char iSrc_len, char* sDst, char iDst_len)
{
  char ix;
  ix = 0;
  while (ix < iSrc_len && ix < iDst_len && sSrc[ix] != '\0')
  {
    sDst[ix] = sSrc[ix];
    ix++;
  }
  // No null terminate
  // Return length of string
  return ix;
}

/*=----------------------------------------------------------------------=*\
   Use :Concatenate sDst = (sSrc1 + sSrc2)
       :sDst is only null terminated if the concat doesnt overflow
       :
\*=----------------------------------------------------------------------=*/
void FCI_SHEAD(char* sSrc1, char iSrc1_len, char* sSrc2, char iSrc2_len, char* sDst, char iDst_len)

{
  char len, strt;

  len = 0;
02D5  01D1  	CLRF FCI_SHEAD_00000_1_len

  if (sSrc2 == sDst)
02D6  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
02D7  0649  	XORWF FCI_SHEAD_00000_arg_sSrc2, W
02D8  1D03  	BTFSS STATUS,Z
02D9  2B7C  	GOTO	label48
02DA  084F  	MOVF FCI_SHEAD_00000_arg_sDst+D'1', W
02DB  064A  	XORWF FCI_SHEAD_00000_arg_sSrc2+D'1', W
02DC  1D03  	BTFSS STATUS,Z
02DD  2B7C  	GOTO	label48
037C        label48

  {
    FCI_GETLENGTH__x(sSrc1, iSrc1_len, strt);
02DE  01D2  	CLRF FCI_SHEAD_00000_1_strt
02DF        label37
02DF  0848  	MOVF FCI_SHEAD_00000_arg_iSrc1_len, W
02E0  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
02E1  1803  	BTFSC STATUS,C
02E2  2AEE  	GOTO	label38
02E3  1383  	BCF STATUS,IRP
02E4  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
02E5  1783  	BSF STATUS,IRP
02E6  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
02E7  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
02E8  0084  	MOVWF FSR
02E9  0880  	MOVF INDF, F
02EA  1903  	BTFSC STATUS,Z
02EB  2AEE  	GOTO	label38
02EC  0AD2  	INCF FCI_SHEAD_00000_1_strt, F
02ED  2ADF  	GOTO	label37
02EE        label38
037B  2B56  	GOTO	label47

    if (strt < iDst_len)
02EE  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
02EF  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
02F0  1803  	BTFSC STATUS,C
02F1  2B55  	GOTO	label46
0355        label46

    {
      // Copy second, in reverse
      // len = FCI_STRREV(sSrc2, iSrc2_len, sDst + strt, iDst_len - strt);
      FCI_GETLENGTH__x(sSrc2, iSrc2_len, len);
02F2  01D1  	CLRF FCI_SHEAD_00000_1_len
02F3        label39
02F3  084D  	MOVF FCI_SHEAD_00000_arg_iSrc2_len, W
02F4  0251  	SUBWF FCI_SHEAD_00000_1_len, W
02F5  1803  	BTFSC STATUS,C
02F6  2B02  	GOTO	label40
02F7  1383  	BCF STATUS,IRP
02F8  184A  	BTFSC FCI_SHEAD_00000_arg_sSrc2+D'1',0
02F9  1783  	BSF STATUS,IRP
02FA  0849  	MOVF FCI_SHEAD_00000_arg_sSrc2, W
02FB  0751  	ADDWF FCI_SHEAD_00000_1_len, W
02FC  0084  	MOVWF FSR
02FD  0880  	MOVF INDF, F
02FE  1903  	BTFSC STATUS,Z
02FF  2B02  	GOTO	label40
0300  0AD1  	INCF FCI_SHEAD_00000_1_len, F
0301  2AF3  	GOTO	label39
0302        label40

      if (len > (iDst_len - strt))
0302  0852  	MOVF FCI_SHEAD_00000_1_strt, W
0303  0250  	SUBWF FCI_SHEAD_00000_arg_iDst_len, W
0304  00D3  	MOVWF CompTempVar2115
0305  0851  	MOVF FCI_SHEAD_00000_1_len, W
0306  0253  	SUBWF CompTempVar2115, W
0307  1803  	BTFSC STATUS,C
0308  2B0C  	GOTO	label41
030C        label41

      {
        len = (iDst_len - strt); // Length of string to copy to
0309  0852  	MOVF FCI_SHEAD_00000_1_strt, W
030A  0250  	SUBWF FCI_SHEAD_00000_arg_iDst_len, W
030B  00D1  	MOVWF FCI_SHEAD_00000_1_len

      }
      iSrc2_len = strt + len; // Use no longer needed var as an offset
030C  0851  	MOVF FCI_SHEAD_00000_1_len, W
030D  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
030E  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len

      strt = len;
030F  0851  	MOVF FCI_SHEAD_00000_1_len, W
0310  00D2  	MOVWF FCI_SHEAD_00000_1_strt

      while (strt > 0)
0311        label42
0311  0852  	MOVF FCI_SHEAD_00000_1_strt, W
0312  3C00  	SUBLW 0x00
0313  1803  	BTFSC STATUS,C
0314  2B2B  	GOTO	label43
032A  2B11  	GOTO	label42
032B        label43

      {
        strt--;
0315  03D2  	DECF FCI_SHEAD_00000_1_strt, F

        iSrc2_len--;
0316  03CD  	DECF FCI_SHEAD_00000_arg_iSrc2_len, F

        sDst[iSrc2_len] = sSrc2[strt];
0317  1383  	BCF STATUS,IRP
0318  184A  	BTFSC FCI_SHEAD_00000_arg_sSrc2+D'1',0
0319  1783  	BSF STATUS,IRP
031A  0849  	MOVF FCI_SHEAD_00000_arg_sSrc2, W
031B  0084  	MOVWF FSR
031C  0852  	MOVF FCI_SHEAD_00000_1_strt, W
031D  00D4  	MOVWF CompTempVar2122
031E  0854  	MOVF CompTempVar2122, W
031F  0784  	ADDWF FSR, F
0320  0800  	MOVF INDF, W
0321  00D5  	MOVWF CompTempVar2123
0322  1383  	BCF STATUS,IRP
0323  184F  	BTFSC FCI_SHEAD_00000_arg_sDst+D'1',0
0324  1783  	BSF STATUS,IRP
0325  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
0326  074D  	ADDWF FCI_SHEAD_00000_arg_iSrc2_len, W
0327  0084  	MOVWF FSR
0328  0855  	MOVF CompTempVar2123, W
0329  0080  	MOVWF INDF

      }
      // Move first
      FCI_STRMOV__x(sSrc1, iSrc1_len, sDst, iDst_len, strt);
032B  01D2  	CLRF FCI_SHEAD_00000_1_strt
032C        label44
032C  0848  	MOVF FCI_SHEAD_00000_arg_iSrc1_len, W
032D  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
032E  1803  	BTFSC STATUS,C
032F  2B52  	GOTO	label45
0330  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
0331  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
0332  1803  	BTFSC STATUS,C
0333  2B52  	GOTO	label45
0334  1383  	BCF STATUS,IRP
0335  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
0336  1783  	BSF STATUS,IRP
0337  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
0338  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
0339  0084  	MOVWF FSR
033A  0880  	MOVF INDF, F
033B  1903  	BTFSC STATUS,Z
033C  2B52  	GOTO	label45
033D  1383  	BCF STATUS,IRP
033E  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
033F  1783  	BSF STATUS,IRP
0340  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
0341  0084  	MOVWF FSR
0342  0852  	MOVF FCI_SHEAD_00000_1_strt, W
0343  00D4  	MOVWF CompTempVar2126
0344  0854  	MOVF CompTempVar2126, W
0345  0784  	ADDWF FSR, F
0346  0800  	MOVF INDF, W
0347  00D5  	MOVWF CompTempVar2127
0348  1383  	BCF STATUS,IRP
0349  184F  	BTFSC FCI_SHEAD_00000_arg_sDst+D'1',0
034A  1783  	BSF STATUS,IRP
034B  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
034C  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
034D  0084  	MOVWF FSR
034E  0855  	MOVF CompTempVar2127, W
034F  0080  	MOVWF INDF
0350  0AD2  	INCF FCI_SHEAD_00000_1_strt, F
0351  2B2C  	GOTO	label44
0352        label45

      len += strt;
0352  0852  	MOVF FCI_SHEAD_00000_1_strt, W
0353  07D1  	ADDWF FCI_SHEAD_00000_1_len, F

    }
    else
0354  2BDE  	GOTO	label53

    {
      // Copy first
      FCI_STRMOV__x(sSrc1, iSrc1_len, sDst, iDst_len, len);
0355  01D1  	CLRF FCI_SHEAD_00000_1_len
0356        label47
0356  0848  	MOVF FCI_SHEAD_00000_arg_iSrc1_len, W
0357  0251  	SUBWF FCI_SHEAD_00000_1_len, W
0358  1803  	BTFSC STATUS,C
0359  2BDE  	GOTO	label53
035A  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
035B  0251  	SUBWF FCI_SHEAD_00000_1_len, W
035C  1803  	BTFSC STATUS,C
035D  2BDE  	GOTO	label53
035E  1383  	BCF STATUS,IRP
035F  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
0360  1783  	BSF STATUS,IRP
0361  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
0362  0751  	ADDWF FCI_SHEAD_00000_1_len, W
0363  0084  	MOVWF FSR
0364  0880  	MOVF INDF, F
0365  1903  	BTFSC STATUS,Z
0366  2BDE  	GOTO	label53
0367  1383  	BCF STATUS,IRP
0368  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
0369  1783  	BSF STATUS,IRP
036A  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
036B  0084  	MOVWF FSR
036C  0851  	MOVF FCI_SHEAD_00000_1_len, W
036D  00D3  	MOVWF CompTempVar2134
036E  0853  	MOVF CompTempVar2134, W
036F  0784  	ADDWF FSR, F
0370  0800  	MOVF INDF, W
0371  00D4  	MOVWF CompTempVar2135
0372  1383  	BCF STATUS,IRP
0373  184F  	BTFSC FCI_SHEAD_00000_arg_sDst+D'1',0
0374  1783  	BSF STATUS,IRP
0375  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
0376  0751  	ADDWF FCI_SHEAD_00000_1_len, W
0377  0084  	MOVWF FSR
0378  0854  	MOVF CompTempVar2135, W
0379  0080  	MOVWF INDF
037A  0AD1  	INCF FCI_SHEAD_00000_1_len, F

    }
  }
  else
  {
    // Copy first
    FCI_STRMOV__x(sSrc1, iSrc1_len, sDst, iDst_len, len);
037C  01D1  	CLRF FCI_SHEAD_00000_1_len
037D        label49
037D  0848  	MOVF FCI_SHEAD_00000_arg_iSrc1_len, W
037E  0251  	SUBWF FCI_SHEAD_00000_1_len, W
037F  1803  	BTFSC STATUS,C
0380  2BA3  	GOTO	label50
0381  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
0382  0251  	SUBWF FCI_SHEAD_00000_1_len, W
0383  1803  	BTFSC STATUS,C
0384  2BA3  	GOTO	label50
0385  1383  	BCF STATUS,IRP
0386  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
0387  1783  	BSF STATUS,IRP
0388  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
0389  0751  	ADDWF FCI_SHEAD_00000_1_len, W
038A  0084  	MOVWF FSR
038B  0880  	MOVF INDF, F
038C  1903  	BTFSC STATUS,Z
038D  2BA3  	GOTO	label50
038E  1383  	BCF STATUS,IRP
038F  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
0390  1783  	BSF STATUS,IRP
0391  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
0392  0084  	MOVWF FSR
0393  0851  	MOVF FCI_SHEAD_00000_1_len, W
0394  00D3  	MOVWF CompTempVar2142
0395  0853  	MOVF CompTempVar2142, W
0396  0784  	ADDWF FSR, F
0397  0800  	MOVF INDF, W
0398  00D4  	MOVWF CompTempVar2143
0399  1383  	BCF STATUS,IRP
039A  184F  	BTFSC FCI_SHEAD_00000_arg_sDst+D'1',0
039B  1783  	BSF STATUS,IRP
039C  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
039D  0751  	ADDWF FCI_SHEAD_00000_1_len, W
039E  0084  	MOVWF FSR
039F  0854  	MOVF CompTempVar2143, W
03A0  0080  	MOVWF INDF
03A1  0AD1  	INCF FCI_SHEAD_00000_1_len, F
03A2  2B7D  	GOTO	label49
03A3        label50

    // Copy second
    if (len < iDst_len)
03A3  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
03A4  0251  	SUBWF FCI_SHEAD_00000_1_len, W
03A5  1803  	BTFSC STATUS,C
03A6  2BDE  	GOTO	label53
03DE        label53

    {
      sSrc1 = sDst + len; // make temp copies in no longer used variables
03A7  0851  	MOVF FCI_SHEAD_00000_1_len, W
03A8  074E  	ADDWF FCI_SHEAD_00000_arg_sDst, W
03A9  00D3  	MOVWF CompTempVar2148
03AA  084F  	MOVF FCI_SHEAD_00000_arg_sDst+D'1', W
03AB  00D4  	MOVWF CompTempVar2149
03AC  1803  	BTFSC STATUS,C
03AD  0AD4  	INCF CompTempVar2149, F
03AE  0853  	MOVF CompTempVar2148, W
03AF  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
03B0  0854  	MOVF CompTempVar2149, W
03B1  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'

      iSrc1_len = iDst_len - len;
03B2  0851  	MOVF FCI_SHEAD_00000_1_len, W
03B3  0250  	SUBWF FCI_SHEAD_00000_arg_iDst_len, W
03B4  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len

      FCI_STRMOV__x(sSrc2, iSrc2_len, sSrc1, iSrc1_len, strt);
03B5  01D2  	CLRF FCI_SHEAD_00000_1_strt
03B6        label51
03B6  084D  	MOVF FCI_SHEAD_00000_arg_iSrc2_len, W
03B7  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
03B8  1803  	BTFSC STATUS,C
03B9  2BDC  	GOTO	label52
03BA  0848  	MOVF FCI_SHEAD_00000_arg_iSrc1_len, W
03BB  0252  	SUBWF FCI_SHEAD_00000_1_strt, W
03BC  1803  	BTFSC STATUS,C
03BD  2BDC  	GOTO	label52
03BE  1383  	BCF STATUS,IRP
03BF  184A  	BTFSC FCI_SHEAD_00000_arg_sSrc2+D'1',0
03C0  1783  	BSF STATUS,IRP
03C1  0849  	MOVF FCI_SHEAD_00000_arg_sSrc2, W
03C2  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
03C3  0084  	MOVWF FSR
03C4  0880  	MOVF INDF, F
03C5  1903  	BTFSC STATUS,Z
03C6  2BDC  	GOTO	label52
03C7  1383  	BCF STATUS,IRP
03C8  184A  	BTFSC FCI_SHEAD_00000_arg_sSrc2+D'1',0
03C9  1783  	BSF STATUS,IRP
03CA  0849  	MOVF FCI_SHEAD_00000_arg_sSrc2, W
03CB  0084  	MOVWF FSR
03CC  0852  	MOVF FCI_SHEAD_00000_1_strt, W
03CD  00D3  	MOVWF CompTempVar2152
03CE  0853  	MOVF CompTempVar2152, W
03CF  0784  	ADDWF FSR, F
03D0  0800  	MOVF INDF, W
03D1  00D4  	MOVWF CompTempVar2153
03D2  1383  	BCF STATUS,IRP
03D3  1847  	BTFSC FCI_SHEAD_00000_arg_sSrc1+D'1',0
03D4  1783  	BSF STATUS,IRP
03D5  0846  	MOVF FCI_SHEAD_00000_arg_sSrc1, W
03D6  0752  	ADDWF FCI_SHEAD_00000_1_strt, W
03D7  0084  	MOVWF FSR
03D8  0854  	MOVF CompTempVar2153, W
03D9  0080  	MOVWF INDF
03DA  0AD2  	INCF FCI_SHEAD_00000_1_strt, F
03DB  2BB6  	GOTO	label51
03DC        label52

      len += strt;
03DC  0852  	MOVF FCI_SHEAD_00000_1_strt, W
03DD  07D1  	ADDWF FCI_SHEAD_00000_1_len, F

    }
  }
  // Terminate (only if can)
  if (len < iDst_len)
03DE  0850  	MOVF FCI_SHEAD_00000_arg_iDst_len, W
03DF  0251  	SUBWF FCI_SHEAD_00000_1_len, W
03E0  1803  	BTFSC STATUS,C

  {
    sDst[len] = '\0';
03E2  1383  	BCF STATUS,IRP
03E3  184F  	BTFSC FCI_SHEAD_00000_arg_sDst+D'1',0
03E4  1783  	BSF STATUS,IRP
03E5  084E  	MOVF FCI_SHEAD_00000_arg_sDst, W
03E6  0751  	ADDWF FCI_SHEAD_00000_1_len, W
03E7  0084  	MOVWF FSR
03E8  3000  	MOVLW 0x00
03E9  0080  	MOVWF INDF

  }
}
03E1  0008  	RETURN
03EA  0008  	RETURN

/*=----------------------------------------------------------------------=*\
   Use :Copy and null-terminate sSrc to sDst, max len iSrc_len
       :sDst is only null terminated if the concat doesnt overflow
       :
\*=----------------------------------------------------------------------=*/
void FCI_SCOPY(char* sSrc, char iSrc_len, char* sDst, char iDst_len)

{
  char len;

  // Move first
  FCI_STRMOV__x(sSrc, iSrc_len, sDst, iDst_len, len);
06AE  01CD  	CLRF FCI_SCOPY_00000_1_len
06AF        label64
06AF  0849  	MOVF FCI_SCOPY_00000_arg_iSrc_len, W
06B0  024D  	SUBWF FCI_SCOPY_00000_1_len, W
06B1  1803  	BTFSC STATUS,C
06B2  2ED5  	GOTO	label65
06B3  084C  	MOVF FCI_SCOPY_00000_arg_iDst_len, W
06B4  024D  	SUBWF FCI_SCOPY_00000_1_len, W
06B5  1803  	BTFSC STATUS,C
06B6  2ED5  	GOTO	label65
06B7  1383  	BCF STATUS,IRP
06B8  1847  	BTFSC FCI_SCOPY_00000_arg_sSrc+D'1',0
06B9  1783  	BSF STATUS,IRP
06BA  0846  	MOVF FCI_SCOPY_00000_arg_sSrc, W
06BB  074D  	ADDWF FCI_SCOPY_00000_1_len, W
06BC  0084  	MOVWF FSR
06BD  0880  	MOVF INDF, F
06BE  1903  	BTFSC STATUS,Z
06BF  2ED5  	GOTO	label65
06C0  1383  	BCF STATUS,IRP
06C1  1847  	BTFSC FCI_SCOPY_00000_arg_sSrc+D'1',0
06C2  1783  	BSF STATUS,IRP
06C3  0846  	MOVF FCI_SCOPY_00000_arg_sSrc, W
06C4  0084  	MOVWF FSR
06C5  084D  	MOVF FCI_SCOPY_00000_1_len, W
06C6  00CE  	MOVWF CompTempVar2161
06C7  084E  	MOVF CompTempVar2161, W
06C8  0784  	ADDWF FSR, F
06C9  0800  	MOVF INDF, W
06CA  00CF  	MOVWF CompTempVar2162
06CB  1383  	BCF STATUS,IRP
06CC  184B  	BTFSC FCI_SCOPY_00000_arg_sDst+D'1',0
06CD  1783  	BSF STATUS,IRP
06CE  084A  	MOVF FCI_SCOPY_00000_arg_sDst, W
06CF  074D  	ADDWF FCI_SCOPY_00000_1_len, W
06D0  0084  	MOVWF FSR
06D1  084F  	MOVF CompTempVar2162, W
06D2  0080  	MOVWF INDF
06D3  0ACD  	INCF FCI_SCOPY_00000_1_len, F
06D4  2EAF  	GOTO	label64
06D5        label65

  // Terminate (only if can)
  if (len < iDst_len)
06D5  084C  	MOVF FCI_SCOPY_00000_arg_iDst_len, W
06D6  024D  	SUBWF FCI_SCOPY_00000_1_len, W
06D7  1803  	BTFSC STATUS,C

  {
    sDst[len] = '\0';
06D9  1383  	BCF STATUS,IRP
06DA  184B  	BTFSC FCI_SCOPY_00000_arg_sDst+D'1',0
06DB  1783  	BSF STATUS,IRP
06DC  084A  	MOVF FCI_SCOPY_00000_arg_sDst, W
06DD  074D  	ADDWF FCI_SCOPY_00000_1_len, W
06DE  0084  	MOVWF FSR
06DF  3000  	MOVLW 0x00
06E0  0080  	MOVWF INDF

  }
}
06D8  0008  	RETURN
06E1  0008  	RETURN





//************************************************************************************
//**  
//**  File name:     E:\Mikroracunari\sef\Sef.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.1.0.0
//**  Date:          Thursday, April 28, 2022 18:52:42
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 2
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 1
#define MX_USES_UINT32 1
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_ucitavanje_sifre();
void FCM_upisivanje_sifre();
void FCM_setup();


//Variable declarations
#define FCSZ_UPISANA_SIFRA 20
#define FCSZ_GLAVNA_SIFRA_STRING 20
#define FCSZ_ZVZ 20
#define FCSZ_VALUE_STRING 20
#define FCV_TRUE (1)
#define FCV_FALSE (0)
MX_CHAR FCV_UPISANA_SIFRA[FCSZ_UPISANA_SIFRA];
MX_BOOL FCV_NOVI;
MX_UINT16 FCV_POM2;
MX_CHAR FCV_GLAVNA_SIFRA_STRING[FCSZ_GLAVNA_SIFRA_STRING];
MX_CHAR FCV_ZVZ[FCSZ_ZVZ];
MX_UINT16 FCV_POM;
MX_BOOL FCV_OTKLJUCAN;
MX_UINT32 FCV_GLAVNA_SIFRA;
MX_UINT16 FCV_SIFRA;
MX_UINT16 FCV_VALUE;
MX_CHAR FCV_VALUE_STRING[FCSZ_VALUE_STRING];




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portb
	#define LCD_1__PORT1    portb
	#define LCD_1__PORT2    portb
	#define LCD_1__PORT3    portb
	#define LCD_1__PORT4    portb
	#define LCD_1__PORT5    portb
	#define LCD_1__TRIS0    trisb
	#define LCD_1__TRIS1    trisb
	#define LCD_1__TRIS2    trisb
	#define LCD_1__TRIS3    trisb
	#define LCD_1__TRIS4    trisb
	#define LCD_1__TRIS5    trisb
	#define LCD_1__BIT0    	4
	#define LCD_1__BIT1    	5
	#define LCD_1__BIT2    	6
	#define LCD_1__BIT3    	7
	#define LCD_1__RS      	2
	#define LCD_1__E       	3
	#define LCD_1__ROWCNT	2
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);


//KeyPad(0): //Defines:

/**** Macro Substitutions ****

a = Unique Reference
b = Key List (Numbers)
c = Key List (Characters)
d = Number of Columns
e = Column Port Letter
f = Column Pin Number 0
g = Column Pin Number 1
h = Column Pin Number 2
i = Column Pin Number 3
j = Number of Rows
k = Row Port Letter
l = Row Pin Number 0
m = Row Pin Number 1
n = Row Pin Number 2
o = Row Pin Number 3

******************************/

//Keypad Common Defines

#define Keypad_2_MX_KEYPAD_COL_NUM	3
#define Keypad_2_MX_KEYPAD_COL_PORT	portd
#define Keypad_2_MX_KEYPAD_COL_TRIS	trisd
#define Keypad_2_MX_KEYPAD_COL_PIN0	2
#define Keypad_2_MX_KEYPAD_COL_PIN1	1
#define Keypad_2_MX_KEYPAD_COL_PIN2	0
#define Keypad_2_MX_KEYPAD_COL_PIN3	0
#define Keypad_2_MX_KEYPAD_ROW_NUM	4
#define Keypad_2_MX_KEYPAD_ROW_PORT	portd
#define Keypad_2_MX_KEYPAD_ROW_TRIS	trisd
#define Keypad_2_MX_KEYPAD_ROW_PIN0	4
#define Keypad_2_MX_KEYPAD_ROW_PIN1	5
#define Keypad_2_MX_KEYPAD_ROW_PIN2	6
#define Keypad_2_MX_KEYPAD_ROW_PIN3	7

//Keypad Pin Arrays

ROMARRAY_S Keypad_2_MX_KEYPAD_COL ROMARRAY_E = {
0A9E  3000  	MOVLW 0x00
0A9F  00BE  	MOVWF gbl_Keypad_2_MX_KEYPAD_COL

	#if (Keypad_2_MX_KEYPAD_COL_NUM >= 1)
		Keypad_2_MX_KEYPAD_COL_PIN0
	#endif
	#if (Keypad_2_MX_KEYPAD_COL_NUM >= 2)
		,Keypad_2_MX_KEYPAD_COL_PIN1
	#endif
	#if (Keypad_2_MX_KEYPAD_COL_NUM >= 3)
		,Keypad_2_MX_KEYPAD_COL_PIN2
	#endif
	#if (Keypad_2_MX_KEYPAD_COL_NUM >= 4)
		,Keypad_2_MX_KEYPAD_COL_PIN3
	#endif
	};

ROMARRAY_S Keypad_2_MX_KEYPAD_ROW ROMARRAY_E = {
0AA0  3001  	MOVLW 0x01
0AA1  00BF  	MOVWF gbl_Keypad_2_MX_KEYPAD_ROW

	#if (Keypad_2_MX_KEYPAD_ROW_NUM >= 1)
		Keypad_2_MX_KEYPAD_ROW_PIN0
	#endif
	#if (Keypad_2_MX_KEYPAD_ROW_NUM >= 2)
		,Keypad_2_MX_KEYPAD_ROW_PIN1
	#endif
	#if (Keypad_2_MX_KEYPAD_ROW_NUM >= 3)
		,Keypad_2_MX_KEYPAD_ROW_PIN2
	#endif
	#if (Keypad_2_MX_KEYPAD_ROW_NUM >= 4)
		,Keypad_2_MX_KEYPAD_ROW_PIN3
	#endif
	};

//Keypad Keypress Data Arrays

ROMARRAY_S Keypad_2_mtxKeysAsNumbers ROMARRAY_E = {1,4,7,10,2,5,8,0,3,6,9,11};
0AA2  3002  	MOVLW 0x02
0AA3  00C0  	MOVWF gbl_Keypad_2_mtxKeysAsNumbers

ROMARRAY_S Keypad_2_mtxKeysAsChars ROMARRAY_E = {'1','4','7','*','2','5','8','0','3','6','9','#'};
0AA4  3003  	MOVLW 0x03
0AA5  00C1  	MOVWF gbl_Keypad_2_mtxKeysAsChars





//KeyPad(0): //Macro function declarations

MX_UINT8 FCD_KeyPad0_GetKeypadNumber();
MX_UINT8 FCD_KeyPad0_GetKeypadAscii();


//EEPROM(0): //Defines:

/**** Macro Substitutions ****
Component has no substitutions
******************************/

#ifndef MX_EEPROM_REF
	#define MX_EEPROM_REF

	extern MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address);
	extern void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data);

#endif




//EEPROM(0): //Macro function declarations

MX_UINT16 FCD_EEPROM0_EEPROMRead(MX_UINT16 addr);
void FCD_EEPROM0_WriteEEPROM(MX_UINT16 addr, MX_UINT16 data);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
03EB  1283  	BCF STATUS, RP0
03EC  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
03ED  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
03EE  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
03EF  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
03F0  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
03F1  1186  	BCF gbl_portb,3

		pt = ((in >> 4) & 0x0f);
03F2  1683  	BSF STATUS, RP0
03F3  0E5A  	SWAPF FCD_LCDDis_00055_arg_in, W
03F4  390F  	ANDLW 0x0F
03F5  00DC  	MOVWF FCD_LCDDis_00055_1_pt
03F6  300F  	MOVLW 0x0F
03F7  05DC  	ANDWF FCD_LCDDis_00055_1_pt, F

		if (pt & 0x01)
03F8  1C5C  	BTFSS FCD_LCDDis_00055_1_pt,0
03F9  2BFC  	GOTO	label54

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
03FA  1283  	BCF STATUS, RP0
03FB  1606  	BSF gbl_portb,4

		if (pt & 0x02)
03FC  1683  	BSF STATUS, RP0
03FD  1CDC  	BTFSS FCD_LCDDis_00055_1_pt,1
03FE  2C01  	GOTO	label55

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
03FF  1283  	BCF STATUS, RP0
0400  1686  	BSF gbl_portb,5

		if (pt & 0x04)
0401  1683  	BSF STATUS, RP0
0402  1D5C  	BTFSS FCD_LCDDis_00055_1_pt,2
0403  2C06  	GOTO	label56

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0404  1283  	BCF STATUS, RP0
0405  1706  	BSF gbl_portb,6

		if (pt & 0x08)
0406  1683  	BSF STATUS, RP0
0407  1DDC  	BTFSS FCD_LCDDis_00055_1_pt,3
0408  2C0B  	GOTO	label57

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0409  1283  	BCF STATUS, RP0
040A  1786  	BSF gbl_portb,7

		if (mask)
040B  1683  	BSF STATUS, RP0
040C  08DB  	MOVF FCD_LCDDis_00055_arg_mask, F
040D  1903  	BTFSC STATUS,Z
040E  2C11  	GOTO	label58

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
040F  1283  	BCF STATUS, RP0
0410  1506  	BSF gbl_portb,2

		LCD_1__DELAY;
0411  300A  	MOVLW 0x0A
0412  1683  	BSF STATUS, RP0
0413  00DD  	MOVWF delay_10us_00000_arg_del
0414  2028  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0415  1283  	BCF STATUS, RP0
0416  1586  	BSF gbl_portb,3

		LCD_1__DELAY;
0417  300A  	MOVLW 0x0A
0418  1683  	BSF STATUS, RP0
0419  00DD  	MOVWF delay_10us_00000_arg_del
041A  2028  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
041B  1283  	BCF STATUS, RP0
041C  1186  	BCF gbl_portb,3

		pt = (in & 0x0f);
041D  300F  	MOVLW 0x0F
041E  1683  	BSF STATUS, RP0
041F  055A  	ANDWF FCD_LCDDis_00055_arg_in, W
0420  00DC  	MOVWF FCD_LCDDis_00055_1_pt

		LCD_1__DELAY;
0421  300A  	MOVLW 0x0A
0422  00DD  	MOVWF delay_10us_00000_arg_del
0423  2028  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0424  1283  	BCF STATUS, RP0
0425  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0426  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0427  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0428  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0429  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
042A  1186  	BCF gbl_portb,3

		if (pt & 0x01)
042B  1683  	BSF STATUS, RP0
042C  1C5C  	BTFSS FCD_LCDDis_00055_1_pt,0
042D  2C30  	GOTO	label59

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
042E  1283  	BCF STATUS, RP0
042F  1606  	BSF gbl_portb,4

		if (pt & 0x02)
0430  1683  	BSF STATUS, RP0
0431  1CDC  	BTFSS FCD_LCDDis_00055_1_pt,1
0432  2C35  	GOTO	label60

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0433  1283  	BCF STATUS, RP0
0434  1686  	BSF gbl_portb,5

		if (pt & 0x04)
0435  1683  	BSF STATUS, RP0
0436  1D5C  	BTFSS FCD_LCDDis_00055_1_pt,2
0437  2C3A  	GOTO	label61

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0438  1283  	BCF STATUS, RP0
0439  1706  	BSF gbl_portb,6

		if (pt & 0x08)
043A  1683  	BSF STATUS, RP0
043B  1DDC  	BTFSS FCD_LCDDis_00055_1_pt,3
043C  2C3F  	GOTO	label62

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
043D  1283  	BCF STATUS, RP0
043E  1786  	BSF gbl_portb,7

		if (mask)
043F  1683  	BSF STATUS, RP0
0440  08DB  	MOVF FCD_LCDDis_00055_arg_mask, F
0441  1903  	BTFSC STATUS,Z
0442  2C45  	GOTO	label63

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0443  1283  	BCF STATUS, RP0
0444  1506  	BSF gbl_portb,2

		LCD_1__DELAY;
0445  300A  	MOVLW 0x0A
0446  1683  	BSF STATUS, RP0
0447  00DD  	MOVWF delay_10us_00000_arg_del
0448  2028  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0449  1283  	BCF STATUS, RP0
044A  1586  	BSF gbl_portb,3

		LCD_1__DELAY;
044B  300A  	MOVLW 0x0A
044C  1683  	BSF STATUS, RP0
044D  00DD  	MOVWF delay_10us_00000_arg_del
044E  2028  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
044F  1283  	BCF STATUS, RP0
0450  1186  	BCF gbl_portb,3

		LCD_1__DELAY;
0451  300A  	MOVLW 0x0A
0452  1683  	BSF STATUS, RP0
0453  00DD  	MOVWF delay_10us_00000_arg_del
0454  2028  	CALL delay_10us_00000


}
0455  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
0788  1683  	BSF STATUS, RP0
0789  1303  	BCF STATUS, RP1
078A  1206  	BCF gbl_trisb,4
078B  1283  	BCF STATUS, RP0
078C  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
078D  1683  	BSF STATUS, RP0
078E  1286  	BCF gbl_trisb,5
078F  1283  	BCF STATUS, RP0
0790  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0791  1683  	BSF STATUS, RP0
0792  1306  	BCF gbl_trisb,6
0793  1283  	BCF STATUS, RP0
0794  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
0795  1683  	BSF STATUS, RP0
0796  1386  	BCF gbl_trisb,7
0797  1283  	BCF STATUS, RP0
0798  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
0799  1683  	BSF STATUS, RP0
079A  1106  	BCF gbl_trisb,2
079B  1283  	BCF STATUS, RP0
079C  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
079D  1683  	BSF STATUS, RP0
079E  1186  	BCF gbl_trisb,3
079F  1283  	BCF STATUS, RP0
07A0  1186  	BCF gbl_portb,3


		Wdt_Delay_Ms(12);
07A1  300C  	MOVLW 0x0C
07A2  1683  	BSF STATUS, RP0
07A3  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07A4  216E  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
07A5  3033  	MOVLW 0x33
07A6  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07A7  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07A8  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07A9  3002  	MOVLW 0x02
07AA  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07AB  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
07AC  3033  	MOVLW 0x33
07AD  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07AE  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07AF  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07B0  3002  	MOVLW 0x02
07B1  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07B2  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
07B3  3032  	MOVLW 0x32
07B4  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07B5  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07B6  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07B7  3002  	MOVLW 0x02
07B8  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07B9  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
07BA  302C  	MOVLW 0x2C
07BB  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07BC  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07BD  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07BE  3002  	MOVLW 0x02
07BF  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07C0  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
07C1  3006  	MOVLW 0x06
07C2  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07C3  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07C4  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07C5  3002  	MOVLW 0x02
07C6  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07C7  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
07C8  300C  	MOVLW 0x0C
07C9  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07CA  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07CB  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07CC  3002  	MOVLW 0x02
07CD  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07CE  216E  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
07CF  3001  	MOVLW 0x01
07D0  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07D1  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07D2  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07D3  3002  	MOVLW 0x02
07D4  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07D5  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
07D6  3002  	MOVLW 0x02
07D7  00DA  	MOVWF FCD_LCDDis_00055_arg_in
07D8  01DB  	CLRF FCD_LCDDis_00055_arg_mask
07D9  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
07DA  3002  	MOVLW 0x02
07DB  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
07DC  216E  	CALL Wdt_Delay__0003E


}
07DD  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
0777  3001  	MOVLW 0x01
0778  1683  	BSF STATUS, RP0
0779  1303  	BCF STATUS, RP1
077A  00DA  	MOVWF FCD_LCDDis_00055_arg_in
077B  01DB  	CLRF FCD_LCDDis_00055_arg_mask
077C  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
077D  3002  	MOVLW 0x02
077E  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
077F  216E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0780  3002  	MOVLW 0x02
0781  00DA  	MOVWF FCD_LCDDis_00055_arg_in
0782  01DB  	CLRF FCD_LCDDis_00055_arg_mask
0783  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
0784  3002  	MOVLW 0x02
0785  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
0786  216E  	CALL Wdt_Delay__0003E


}
0787  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
0766  08C7  	MOVF FCD_LCDDis_0005A_arg_y, F
0767  1D03  	BTFSS STATUS,Z
0768  2F6C  	GOTO	label78
076C        label78

			y=0x80;
0769  3080  	MOVLW 0x80
076A  00C7  	MOVWF FCD_LCDDis_0005A_arg_y

		else
076B  2F6E  	GOTO	label79
076E        label79

			y=0xc0;
076C  30C0  	MOVLW 0xC0
076D  00C7  	MOVWF FCD_LCDDis_0005A_arg_y

	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
			y=0x80;
		else if (y==1)
			y=0xc0;

		#if (LCD_1__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
076E  0846  	MOVF FCD_LCDDis_0005A_arg_x, W
076F  0747  	ADDWF FCD_LCDDis_0005A_arg_y, W
0770  00DA  	MOVWF FCD_LCDDis_00055_arg_in
0771  01DB  	CLRF FCD_LCDDis_00055_arg_mask
0772  23EB  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
0773  3002  	MOVLW 0x02
0774  00C8  	MOVWF Wdt_Delay__0003E_arg_delay
0775  216E  	CALL Wdt_Delay__0003E


}
0776  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
074A  01D9  	CLRF FCD_LCDDis_0005C_1_idx


		for (idx=0; idx<MSZ_String; idx++)
074B  01D9  	CLRF FCD_LCDDis_0005C_1_idx
074C        label77
074C  0858  	MOVF FCD_LCDDis_0005C_arg_MSZ_String, W
074D  0259  	SUBWF FCD_LCDDis_0005C_1_idx, W
074E  1803  	BTFSC STATUS,C
0764  0AD9  	INCF FCD_LCDDis_0005C_1_idx, F
0765  2F4C  	GOTO	label77

		{
			if (String[idx] == 0)
0750  1383  	BCF STATUS,IRP
0751  1847  	BTFSC FCD_LCDDis_0005C_arg_String+D'1',0
0752  1783  	BSF STATUS,IRP
0753  0846  	MOVF FCD_LCDDis_0005C_arg_String, W
0754  0759  	ADDWF FCD_LCDDis_0005C_1_idx, W
0755  0084  	MOVWF FSR
0756  0880  	MOVF INDF, F
0757  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
0759  1383  	BCF STATUS,IRP
075A  1847  	BTFSC FCD_LCDDis_0005C_arg_String+D'1',0
075B  1783  	BSF STATUS,IRP
075C  0846  	MOVF FCD_LCDDis_0005C_arg_String, W
075D  0759  	ADDWF FCD_LCDDis_0005C_1_idx, W
075E  0084  	MOVWF FSR
075F  0800  	MOVF INDF, W
0760  00DA  	MOVWF FCD_LCDDis_00055_arg_in
0761  3010  	MOVLW 0x10
0762  00DB  	MOVWF FCD_LCDDis_00055_arg_mask
0763  23EB  	CALL FCD_LCDDis_00055

		}

}
074F  0008  	RETURN
0758  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}



//KeyPad(0): //Macro implementations


MX_UINT8 FCD_KeyPad0_GetKeypadNumber()

{
	
		MX_UINT8 iCol, iRow, idx;

		for (iCol = 0; iCol < Keypad_2_MX_KEYPAD_COL_NUM; iCol++)
07DE  1683  	BSF STATUS, RP0
07DF  1303  	BCF STATUS, RP1
07E0  01C6  	CLRF FCD_KeyPad_00061_1_iCol
07E1        label80
07E1  3003  	MOVLW 0x03
07E2  0246  	SUBWF FCD_KeyPad_00061_1_iCol, W
07E3  158A  	BSF PCLATH,3
07E4  1803  	BTFSC STATUS,C
07E5  2890  	GOTO	label96
088D  0AC6  	INCF FCD_KeyPad_00061_1_iCol, F
088E  118A  	BCF PCLATH,3
088F  2FE1  	GOTO	label80
0890        label96

		{
			FC_CAL_Bit_High_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 		//output the appropriate column high
07E6  083E  	MOVF gbl_Keypad_2_MX_KEYPAD_COL, W
07E7  00C9  	MOVWF __rom_get_00000_arg_objNumb
07E8  0846  	MOVF FCD_KeyPad_00061_1_iCol, W
07E9  00CA  	MOVWF __rom_get_00000_arg_idx
07EA  118A  	BCF PCLATH,3
07EB  2040  	CALL __rom_get_00000
07EC  00CB  	MOVWF CompTempVar2270
07ED  3001  	MOVLW 0x01
07EE  00CC  	MOVWF CompTempVar2271
07EF  01CD  	CLRF CompTempVar2272
07F0  084B  	MOVF CompTempVar2270, W
07F1        label81
07F1  39FF  	ANDLW 0xFF
07F2  118A  	BCF PCLATH,3
07F3  120A  	BCF PCLATH,4
07F4  1903  	BTFSC STATUS,Z
07F5  2FFB  	GOTO	label82
07F6  1003  	BCF STATUS,C
07F7  0DCC  	RLF CompTempVar2271, F
07F8  0DCD  	RLF CompTempVar2272, F
07F9  3EFF  	ADDLW 0xFF
07FA  2FF1  	GOTO	label81
07FB        label82
07FB  094C  	COMF CompTempVar2271, W
07FC  0588  	ANDWF gbl_trisd, F
07FD  083E  	MOVF gbl_Keypad_2_MX_KEYPAD_COL, W
07FE  00C9  	MOVWF __rom_get_00000_arg_objNumb
07FF  0846  	MOVF FCD_KeyPad_00061_1_iCol, W
0800  00CA  	MOVWF __rom_get_00000_arg_idx
0801  2040  	CALL __rom_get_00000
0802  00CB  	MOVWF CompTempVar2274
0803  3001  	MOVLW 0x01
0804  00CC  	MOVWF CompTempVar2275
0805  084B  	MOVF CompTempVar2274, W
0806        label83
0806  39FF  	ANDLW 0xFF
0807  158A  	BSF PCLATH,3
0808  120A  	BCF PCLATH,4
0809  1903  	BTFSC STATUS,Z
080A  280F  	GOTO	label84
080B  1003  	BCF STATUS,C
080C  0DCC  	RLF CompTempVar2275, F
080D  3EFF  	ADDLW 0xFF
080E  2806  	GOTO	label83
080F        label84
080F  084C  	MOVF CompTempVar2275, W
0810  1283  	BCF STATUS, RP0
0811  0488  	IORWF gbl_portd, F

			delay_us(10);																//delay to allow input to settle
0812  300A  	MOVLW 0x0A
0813  1683  	BSF STATUS, RP0
0814  00C9  	MOVWF delay_us_00000_arg_del
0815  118A  	BCF PCLATH,3
0816  2036  	CALL delay_us_00000


			for (iRow = 0; iRow < Keypad_2_MX_KEYPAD_ROW_NUM; iRow++)
0817  01C7  	CLRF FCD_KeyPad_00061_1_iRow
0818        label85
0818  3004  	MOVLW 0x04
0819  0247  	SUBWF FCD_KeyPad_00061_1_iRow, W
081A  158A  	BSF PCLATH,3
081B  1803  	BTFSC STATUS,C
081C  2878  	GOTO	label93
0875  1683  	BSF STATUS, RP0
0876  0AC7  	INCF FCD_KeyPad_00061_1_iRow, F
0877  2818  	GOTO	label85
0878        label93

			{
				FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_ROW_PORT, Keypad_2_MX_KEYPAD_ROW_TRIS, Keypad_2_MX_KEYPAD_ROW[iRow] );
081D  083F  	MOVF gbl_Keypad_2_MX_KEYPAD_ROW, W
081E  00C9  	MOVWF __rom_get_00000_arg_objNumb
081F  0847  	MOVF FCD_KeyPad_00061_1_iRow, W
0820  00CA  	MOVWF __rom_get_00000_arg_idx
0821  118A  	BCF PCLATH,3
0822  2040  	CALL __rom_get_00000
0823  00CE  	MOVWF CompTempVar2280
0824  3001  	MOVLW 0x01
0825  00CF  	MOVWF CompTempVar2281
0826  084E  	MOVF CompTempVar2280, W
0827        label86
0827  39FF  	ANDLW 0xFF
0828  158A  	BSF PCLATH,3
0829  120A  	BCF PCLATH,4
082A  1903  	BTFSC STATUS,Z
082B  2830  	GOTO	label87
082C  1003  	BCF STATUS,C
082D  0DCF  	RLF CompTempVar2281, F
082E  3EFF  	ADDLW 0xFF
082F  2827  	GOTO	label86
0830        label87
0830  084F  	MOVF CompTempVar2281, W
0831  0488  	IORWF gbl_trisd, F

				if ( FC_CAL_Bit_In ( Keypad_2_MX_KEYPAD_ROW_PORT, Keypad_2_MX_KEYPAD_ROW[iRow] ))
0832  083F  	MOVF gbl_Keypad_2_MX_KEYPAD_ROW, W
0833  00C9  	MOVWF __rom_get_00000_arg_objNumb
0834  0847  	MOVF FCD_KeyPad_00061_1_iRow, W
0835  00CA  	MOVWF __rom_get_00000_arg_idx
0836  118A  	BCF PCLATH,3
0837  2040  	CALL __rom_get_00000
0838  00CB  	MOVWF CompTempVar2277
0839  3001  	MOVLW 0x01
083A  00CC  	MOVWF CompTempVar2278
083B  01CD  	CLRF CompTempVar2279
083C  084B  	MOVF CompTempVar2277, W
083D        label88
083D  39FF  	ANDLW 0xFF
083E  158A  	BSF PCLATH,3
083F  120A  	BCF PCLATH,4
0840  1903  	BTFSC STATUS,Z
0841  2847  	GOTO	label89
0842  1003  	BCF STATUS,C
0843  0DCC  	RLF CompTempVar2278, F
0844  0DCD  	RLF CompTempVar2279, F
0845  3EFF  	ADDLW 0xFF
0846  283D  	GOTO	label88
0847        label89
0847  084C  	MOVF CompTempVar2278, W
0848  1283  	BCF STATUS, RP0
0849  0508  	ANDWF gbl_portd, W
084A  1903  	BTFSC STATUS,Z
084B  2875  	GOTO	label92
0875        label92

				{
					idx = (iCol * Keypad_2_MX_KEYPAD_ROW_NUM) + iRow;
084C  1683  	BSF STATUS, RP0
084D  0846  	MOVF FCD_KeyPad_00061_1_iCol, W
084E  00C8  	MOVWF FCD_KeyPad_00061_1_idx
084F  01CE  	CLRF CompTempVar2287
0850  0DC8  	RLF FCD_KeyPad_00061_1_idx, F
0851  0DCE  	RLF CompTempVar2287, F
0852  0DC8  	RLF FCD_KeyPad_00061_1_idx, F
0853  0DCE  	RLF CompTempVar2287, F
0854  30FC  	MOVLW 0xFC
0855  05C8  	ANDWF FCD_KeyPad_00061_1_idx, F
0856  0847  	MOVF FCD_KeyPad_00061_1_iRow, W
0857  07C8  	ADDWF FCD_KeyPad_00061_1_idx, F

					FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 	//Allow the column pin to float
0858  083E  	MOVF gbl_Keypad_2_MX_KEYPAD_COL, W
0859  00C9  	MOVWF __rom_get_00000_arg_objNumb
085A  0846  	MOVF FCD_KeyPad_00061_1_iCol, W
085B  00CA  	MOVWF __rom_get_00000_arg_idx
085C  118A  	BCF PCLATH,3
085D  2040  	CALL __rom_get_00000
085E  00CE  	MOVWF CompTempVar2288
085F  3001  	MOVLW 0x01
0860  00CF  	MOVWF CompTempVar2289
0861  084E  	MOVF CompTempVar2288, W
0862        label90
0862  39FF  	ANDLW 0xFF
0863  158A  	BSF PCLATH,3
0864  120A  	BCF PCLATH,4
0865  1903  	BTFSC STATUS,Z
0866  286B  	GOTO	label91
0867  1003  	BCF STATUS,C
0868  0DCF  	RLF CompTempVar2289, F
0869  3EFF  	ADDLW 0xFF
086A  2862  	GOTO	label90
086B        label91
086B  084F  	MOVF CompTempVar2289, W
086C  0488  	IORWF gbl_trisd, F

					return (Keypad_2_mtxKeysAsNumbers[idx]);
086D  0840  	MOVF gbl_Keypad_2_mtxKeysAsNumbers, W
086E  00C9  	MOVWF __rom_get_00000_arg_objNumb
086F  0848  	MOVF FCD_KeyPad_00061_1_idx, W
0870  00CA  	MOVWF __rom_get_00000_arg_idx
0871  118A  	BCF PCLATH,3
0872  2040  	CALL __rom_get_00000
0873  00CE  	MOVWF CompTempVarRet2269

				}
			}
			FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 		//Allow the column pin to float
0878  083E  	MOVF gbl_Keypad_2_MX_KEYPAD_COL, W
0879  00C9  	MOVWF __rom_get_00000_arg_objNumb
087A  0846  	MOVF FCD_KeyPad_00061_1_iCol, W
087B  00CA  	MOVWF __rom_get_00000_arg_idx
087C  118A  	BCF PCLATH,3
087D  2040  	CALL __rom_get_00000
087E  00CB  	MOVWF CompTempVar2291
087F  3001  	MOVLW 0x01
0880  00CC  	MOVWF CompTempVar2292
0881  084B  	MOVF CompTempVar2291, W
0882        label94
0882  39FF  	ANDLW 0xFF
0883  158A  	BSF PCLATH,3
0884  120A  	BCF PCLATH,4
0885  1903  	BTFSC STATUS,Z
0886  288B  	GOTO	label95
0887  1003  	BCF STATUS,C
0888  0DCC  	RLF CompTempVar2292, F
0889  3EFF  	ADDLW 0xFF
088A  2882  	GOTO	label94
088B        label95
088B  084C  	MOVF CompTempVar2292, W
088C  0488  	IORWF gbl_trisd, F

		}
		return (255);																	//if it gets here, it has not been found...
0890  30FF  	MOVLW 0xFF
0891  00CE  	MOVWF CompTempVarRet2269


}
0874  0008  	RETURN
0892  0008  	RETURN


MX_UINT8 FCD_KeyPad0_GetKeypadAscii()
{
	
		MX_UINT8 iCol, iRow, idx;

		for (iCol = 0; iCol < Keypad_2_MX_KEYPAD_COL_NUM; iCol++)
		{
			FC_CAL_Bit_High_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 		//output the appropriate column high
			delay_us(10);																//delay to allow input to settle

			for (iRow = 0; iRow < Keypad_2_MX_KEYPAD_ROW_NUM; iRow++)
			{
				FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_ROW_PORT, Keypad_2_MX_KEYPAD_ROW_TRIS, Keypad_2_MX_KEYPAD_ROW[iRow] );
				if ( FC_CAL_Bit_In ( Keypad_2_MX_KEYPAD_ROW_PORT, Keypad_2_MX_KEYPAD_ROW[iRow] ))
				{
					idx = (iCol * Keypad_2_MX_KEYPAD_ROW_NUM) + iRow;
					FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 	//Allow the column pin to float
					return (Keypad_2_mtxKeysAsChars[idx]);
				}
			}
			FC_CAL_Bit_In_DDR ( Keypad_2_MX_KEYPAD_COL_PORT, Keypad_2_MX_KEYPAD_COL_TRIS, Keypad_2_MX_KEYPAD_COL[iCol] ); 		//Allow the column pin to float
		}
		return (255);																	//if it gets here, it has not been found...

}



//EEPROM(0): //Macro implementations


MX_UINT16 FCD_EEPROM0_EEPROMRead(MX_UINT16 addr)

{
	
		return (FC_CAL_EE_Read (addr));
045E  0846  	MOVF FCD_EEPROM_00052_arg_addr, W
045F  00C8  	MOVWF FC_CAL_EE__00063_arg_Address
0460  0847  	MOVF FCD_EEPROM_00052_arg_addr+D'1', W
0461  00C9  	MOVWF FC_CAL_EE__00063_arg_Address+D'1'
0462  2125  	CALL FC_CAL_EE__00063
0463  084B  	MOVF CompTempVarRet2319, W
0464  00C8  	MOVWF CompTempVarRet2218
0465  01C9  	CLRF CompTempVarRet2218+D'1'


}
0466  0008  	RETURN


void FCD_EEPROM0_WriteEEPROM(MX_UINT16 addr, MX_UINT16 data)

{
	
		FC_CAL_EE_Write (addr, data);
0456  0846  	MOVF FCD_EEPROM_00054_arg_addr, W
0457  00CA  	MOVWF FC_CAL_EE__00064_arg_Address
0458  0847  	MOVF FCD_EEPROM_00054_arg_addr+D'1', W
0459  00CB  	MOVWF FC_CAL_EE__00064_arg_Address+D'1'
045A  0848  	MOVF FCD_EEPROM_00054_arg_data, W
045B  00CC  	MOVWF FC_CAL_EE__00064_arg_Data
045C  20FF  	CALL FC_CAL_EE__00064


}
045D  0008  	RETURN


#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_ucitavanje_sifre()

{

	//Call Component Macro
	//Call Component Macro: value=Read(0)
	FCV_VALUE = FCD_EEPROM0_EEPROMRead(0);
059C  1683  	BSF STATUS, RP0
059D  1303  	BCF STATUS, RP1
059E  01C6  	CLRF FCD_EEPROM_00052_arg_addr
059F  01C7  	CLRF FCD_EEPROM_00052_arg_addr+D'1'
05A0  245E  	CALL FCD_EEPROM_00052
05A1  0848  	MOVF CompTempVarRet2218, W
05A2  00B2  	MOVWF gbl_FCV_VALUE
05A3  0849  	MOVF CompTempVarRet2218+D'1', W
05A4  00B3  	MOVWF gbl_FCV_VALUE+D'1'


	//Delay
	//Delay: 20 ms
	delay_ms(20);
05A5  3014  	MOVLW 0x14
05A6  00CA  	MOVWF delay_ms_00000_arg_del
05A7  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  value_string = ToString$ (value)
	//  upisana_sifra = upisana_sifra + value_string
	FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
05A8  0832  	MOVF gbl_FCV_VALUE, W
05A9  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
05AA  0833  	MOVF gbl_FCV_VALUE+D'1', W
05AB  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
05AC  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
05AD  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
05AE  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
05AF  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
05B0  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
05B1  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
05B2  3014  	MOVLW 0x14
05B3  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
05B4  2179  	CALL FCI_TOSTRI_00049

	FCI_SHEAD(FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
05B5  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
05B6  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
05B7  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
05B8  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
05B9  3014  	MOVLW 0x14
05BA  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
05BB  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
05BC  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
05BD  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
05BE  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
05BF  3014  	MOVLW 0x14
05C0  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
05C1  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
05C2  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
05C3  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
05C4  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
05C5  3014  	MOVLW 0x14
05C6  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
05C7  22D5  	CALL FCI_SHEAD_00000


	//Call Component Macro
	//Call Component Macro: value=Read(1)
	FCV_VALUE = FCD_EEPROM0_EEPROMRead(1);
05C8  3001  	MOVLW 0x01
05C9  00C6  	MOVWF FCD_EEPROM_00052_arg_addr
05CA  01C7  	CLRF FCD_EEPROM_00052_arg_addr+D'1'
05CB  245E  	CALL FCD_EEPROM_00052
05CC  0848  	MOVF CompTempVarRet2218, W
05CD  00B2  	MOVWF gbl_FCV_VALUE
05CE  0849  	MOVF CompTempVarRet2218+D'1', W
05CF  00B3  	MOVWF gbl_FCV_VALUE+D'1'


	//Delay
	//Delay: 20 ms
	delay_ms(20);
05D0  3014  	MOVLW 0x14
05D1  00CA  	MOVWF delay_ms_00000_arg_del
05D2  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  value_string = ToString$ (value)
	//  upisana_sifra = upisana_sifra + value_string
	FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
05D3  0832  	MOVF gbl_FCV_VALUE, W
05D4  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
05D5  0833  	MOVF gbl_FCV_VALUE+D'1', W
05D6  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
05D7  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
05D8  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
05D9  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
05DA  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
05DB  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
05DC  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
05DD  3014  	MOVLW 0x14
05DE  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
05DF  2179  	CALL FCI_TOSTRI_00049

	FCI_SHEAD(FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
05E0  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
05E1  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
05E2  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
05E3  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
05E4  3014  	MOVLW 0x14
05E5  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
05E6  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
05E7  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
05E8  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
05E9  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
05EA  3014  	MOVLW 0x14
05EB  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
05EC  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
05ED  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
05EE  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
05EF  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
05F0  3014  	MOVLW 0x14
05F1  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
05F2  22D5  	CALL FCI_SHEAD_00000


	//Call Component Macro
	//Call Component Macro: value=Read(2)
	FCV_VALUE = FCD_EEPROM0_EEPROMRead(2);
05F3  3002  	MOVLW 0x02
05F4  00C6  	MOVWF FCD_EEPROM_00052_arg_addr
05F5  01C7  	CLRF FCD_EEPROM_00052_arg_addr+D'1'
05F6  245E  	CALL FCD_EEPROM_00052
05F7  0848  	MOVF CompTempVarRet2218, W
05F8  00B2  	MOVWF gbl_FCV_VALUE
05F9  0849  	MOVF CompTempVarRet2218+D'1', W
05FA  00B3  	MOVWF gbl_FCV_VALUE+D'1'


	//Delay
	//Delay: 20 ms
	delay_ms(20);
05FB  3014  	MOVLW 0x14
05FC  00CA  	MOVWF delay_ms_00000_arg_del
05FD  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  value_string = ToString$ (value)
	//  upisana_sifra = upisana_sifra + value_string
	FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
05FE  0832  	MOVF gbl_FCV_VALUE, W
05FF  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
0600  0833  	MOVF gbl_FCV_VALUE+D'1', W
0601  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
0602  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
0603  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
0604  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0605  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
0606  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
0607  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
0608  3014  	MOVLW 0x14
0609  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
060A  2179  	CALL FCI_TOSTRI_00049

	FCI_SHEAD(FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
060B  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
060C  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
060D  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
060E  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
060F  3014  	MOVLW 0x14
0610  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
0611  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0612  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
0613  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
0614  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
0615  3014  	MOVLW 0x14
0616  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
0617  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
0618  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
0619  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
061A  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
061B  3014  	MOVLW 0x14
061C  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
061D  22D5  	CALL FCI_SHEAD_00000


	//Call Component Macro
	//Call Component Macro: value=Read(3)
	FCV_VALUE = FCD_EEPROM0_EEPROMRead(3);
061E  3003  	MOVLW 0x03
061F  00C6  	MOVWF FCD_EEPROM_00052_arg_addr
0620  01C7  	CLRF FCD_EEPROM_00052_arg_addr+D'1'
0621  245E  	CALL FCD_EEPROM_00052
0622  0848  	MOVF CompTempVarRet2218, W
0623  00B2  	MOVWF gbl_FCV_VALUE
0624  0849  	MOVF CompTempVarRet2218+D'1', W
0625  00B3  	MOVWF gbl_FCV_VALUE+D'1'


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0626  3014  	MOVLW 0x14
0627  00CA  	MOVWF delay_ms_00000_arg_del
0628  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  value_string = ToString$ (value)
	//  upisana_sifra = upisana_sifra + value_string
	FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
0629  0832  	MOVF gbl_FCV_VALUE, W
062A  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
062B  0833  	MOVF gbl_FCV_VALUE+D'1', W
062C  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
062D  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
062E  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
062F  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0630  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
0631  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
0632  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
0633  3014  	MOVLW 0x14
0634  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
0635  2179  	CALL FCI_TOSTRI_00049

	FCI_SHEAD(FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
0636  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
0637  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
0638  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
0639  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
063A  3014  	MOVLW 0x14
063B  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
063C  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
063D  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
063E  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
063F  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
0640  3014  	MOVLW 0x14
0641  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
0642  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
0643  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
0644  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
0645  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
0646  3014  	MOVLW 0x14
0647  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
0648  22D5  	CALL FCI_SHEAD_00000


	//Call Component Macro
	//Call Component Macro: value=Read(4)
	FCV_VALUE = FCD_EEPROM0_EEPROMRead(4);
0649  3004  	MOVLW 0x04
064A  00C6  	MOVWF FCD_EEPROM_00052_arg_addr
064B  01C7  	CLRF FCD_EEPROM_00052_arg_addr+D'1'
064C  245E  	CALL FCD_EEPROM_00052
064D  0848  	MOVF CompTempVarRet2218, W
064E  00B2  	MOVWF gbl_FCV_VALUE
064F  0849  	MOVF CompTempVarRet2218+D'1', W
0650  00B3  	MOVWF gbl_FCV_VALUE+D'1'


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0651  3014  	MOVLW 0x14
0652  00CA  	MOVWF delay_ms_00000_arg_del
0653  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  value_string = ToString$ (value)
	//  upisana_sifra = upisana_sifra + value_string
	FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
0654  0832  	MOVF gbl_FCV_VALUE, W
0655  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
0656  0833  	MOVF gbl_FCV_VALUE+D'1', W
0657  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
0658  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
0659  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
065A  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
065B  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
065C  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
065D  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
065E  3014  	MOVLW 0x14
065F  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
0660  2179  	CALL FCI_TOSTRI_00049

	FCI_SHEAD(FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
0661  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
0662  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
0663  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
0664  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
0665  3014  	MOVLW 0x14
0666  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
0667  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0668  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
0669  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
066A  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
066B  3014  	MOVLW 0x14
066C  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
066D  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
066E  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
066F  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
0670  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
0671  3014  	MOVLW 0x14
0672  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
0673  22D5  	CALL FCI_SHEAD_00000


}
0674  0008  	RETURN



void FCM_upisivanje_sifre()

{

	//Calculation
	//Calculation:
	//  glavna_sifra = StringToInt$ (glavna_sifra_string)
	FCV_GLAVNA_SIFRA = FCI_STRING_TO_INT(FCV_GLAVNA_SIFRA_STRING, FCSZ_GLAVNA_SIFRA_STRING);
0467  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0468  1683  	BSF STATUS, RP0
0469  1303  	BCF STATUS, RP1
046A  00C7  	MOVWF FCI_STRING_0004F_arg_String+D'1'
046B  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
046C  00C6  	MOVWF FCI_STRING_0004F_arg_String
046D  3014  	MOVLW 0x14
046E  00C8  	MOVWF FCI_STRING_0004F_arg_MSZ_String
046F  223E  	CALL FCI_STRING_0004F
0470  0850  	MOVF CompTempVarRet2061, W
0471  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
0472  0851  	MOVF CompTempVarRet2061+D'1', W
0473  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
0474  0852  	MOVF CompTempVarRet2061+D'2', W
0475  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
0476  0853  	MOVF CompTempVarRet2061+D'3', W
0477  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Calculation
	//Calculation:
	//  pom2 = glavna_sifra / 10000
	//  pom = glavna_sifra % 10
	//  glavna_sifra = glavna_sifra / 10
	FCV_POM2 = FCV_GLAVNA_SIFRA / 10000;
0478  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
0479  00D4  	MOVWF __div_32_3_00001_arg_a
047A  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
047B  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
047C  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
047D  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
047E  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
047F  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
0480  3010  	MOVLW 0x10
0481  00D8  	MOVWF __div_32_3_00001_arg_b
0482  3027  	MOVLW 0x27
0483  00D9  	MOVWF __div_32_3_00001_arg_b+D'1'
0484  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
0485  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
0486  20C6  	CALL __div_32_3_00001
0487  0861  	MOVF CompTempVarRet210, W
0488  00AE  	MOVWF gbl_FCV_POM2
0489  0862  	MOVF CompTempVarRet210+D'1', W
048A  00AF  	MOVWF gbl_FCV_POM2+D'1'

	FCV_POM = FCV_GLAVNA_SIFRA % 10;
048B  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
048C  00C6  	MOVWF __rem_32_3_00002_arg_a
048D  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
048E  00C7  	MOVWF __rem_32_3_00002_arg_a+D'1'
048F  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
0490  00C8  	MOVWF __rem_32_3_00002_arg_a+D'2'
0491  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
0492  00C9  	MOVWF __rem_32_3_00002_arg_a+D'3'
0493  300A  	MOVLW 0x0A
0494  00CA  	MOVWF __rem_32_3_00002_arg_b
0495  01CB  	CLRF __rem_32_3_00002_arg_b+D'1'
0496  01CC  	CLRF __rem_32_3_00002_arg_b+D'2'
0497  01CD  	CLRF __rem_32_3_00002_arg_b+D'3'
0498  2135  	CALL __rem_32_3_00002
0499  0853  	MOVF CompTempVarRet212, W
049A  00B0  	MOVWF gbl_FCV_POM
049B  0854  	MOVF CompTempVarRet212+D'1', W
049C  00B1  	MOVWF gbl_FCV_POM+D'1'

	FCV_GLAVNA_SIFRA = FCV_GLAVNA_SIFRA / 10;
049D  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
049E  00D4  	MOVWF __div_32_3_00001_arg_a
049F  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
04A0  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
04A1  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
04A2  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
04A3  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
04A4  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
04A5  300A  	MOVLW 0x0A
04A6  00D8  	MOVWF __div_32_3_00001_arg_b
04A7  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
04A8  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
04A9  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
04AA  20C6  	CALL __div_32_3_00001
04AB  0861  	MOVF CompTempVarRet210, W
04AC  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
04AD  0862  	MOVF CompTempVarRet210+D'1', W
04AE  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
04AF  0863  	MOVF CompTempVarRet210+D'2', W
04B0  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
04B1  0864  	MOVF CompTempVarRet210+D'3', W
04B2  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Call Component Macro
	//Call Component Macro: Write(4, pom)
	FCD_EEPROM0_WriteEEPROM(4, FCV_POM);
04B3  3004  	MOVLW 0x04
04B4  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
04B5  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
04B6  0830  	MOVF gbl_FCV_POM, W
04B7  00C8  	MOVWF FCD_EEPROM_00054_arg_data
04B8  0831  	MOVF gbl_FCV_POM+D'1', W
04B9  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
04BA  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
04BB  3014  	MOVLW 0x14
04BC  1303  	BCF STATUS, RP1
04BD  00CA  	MOVWF delay_ms_00000_arg_del
04BE  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  pom = glavna_sifra % 10
	//  glavna_sifra = glavna_sifra / 10
	FCV_POM = FCV_GLAVNA_SIFRA % 10;
04BF  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
04C0  00C6  	MOVWF __rem_32_3_00002_arg_a
04C1  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
04C2  00C7  	MOVWF __rem_32_3_00002_arg_a+D'1'
04C3  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
04C4  00C8  	MOVWF __rem_32_3_00002_arg_a+D'2'
04C5  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
04C6  00C9  	MOVWF __rem_32_3_00002_arg_a+D'3'
04C7  300A  	MOVLW 0x0A
04C8  00CA  	MOVWF __rem_32_3_00002_arg_b
04C9  01CB  	CLRF __rem_32_3_00002_arg_b+D'1'
04CA  01CC  	CLRF __rem_32_3_00002_arg_b+D'2'
04CB  01CD  	CLRF __rem_32_3_00002_arg_b+D'3'
04CC  2135  	CALL __rem_32_3_00002
04CD  0853  	MOVF CompTempVarRet212, W
04CE  00B0  	MOVWF gbl_FCV_POM
04CF  0854  	MOVF CompTempVarRet212+D'1', W
04D0  00B1  	MOVWF gbl_FCV_POM+D'1'

	FCV_GLAVNA_SIFRA = FCV_GLAVNA_SIFRA / 10;
04D1  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
04D2  00D4  	MOVWF __div_32_3_00001_arg_a
04D3  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
04D4  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
04D5  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
04D6  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
04D7  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
04D8  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
04D9  300A  	MOVLW 0x0A
04DA  00D8  	MOVWF __div_32_3_00001_arg_b
04DB  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
04DC  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
04DD  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
04DE  20C6  	CALL __div_32_3_00001
04DF  0861  	MOVF CompTempVarRet210, W
04E0  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
04E1  0862  	MOVF CompTempVarRet210+D'1', W
04E2  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
04E3  0863  	MOVF CompTempVarRet210+D'2', W
04E4  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
04E5  0864  	MOVF CompTempVarRet210+D'3', W
04E6  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Call Component Macro
	//Call Component Macro: Write(3, pom)
	FCD_EEPROM0_WriteEEPROM(3, FCV_POM);
04E7  3003  	MOVLW 0x03
04E8  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
04E9  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
04EA  0830  	MOVF gbl_FCV_POM, W
04EB  00C8  	MOVWF FCD_EEPROM_00054_arg_data
04EC  0831  	MOVF gbl_FCV_POM+D'1', W
04ED  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
04EE  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
04EF  3014  	MOVLW 0x14
04F0  1303  	BCF STATUS, RP1
04F1  00CA  	MOVWF delay_ms_00000_arg_del
04F2  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  pom = glavna_sifra % 10
	//  glavna_sifra = glavna_sifra / 10
	FCV_POM = FCV_GLAVNA_SIFRA % 10;
04F3  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
04F4  00C6  	MOVWF __rem_32_3_00002_arg_a
04F5  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
04F6  00C7  	MOVWF __rem_32_3_00002_arg_a+D'1'
04F7  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
04F8  00C8  	MOVWF __rem_32_3_00002_arg_a+D'2'
04F9  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
04FA  00C9  	MOVWF __rem_32_3_00002_arg_a+D'3'
04FB  300A  	MOVLW 0x0A
04FC  00CA  	MOVWF __rem_32_3_00002_arg_b
04FD  01CB  	CLRF __rem_32_3_00002_arg_b+D'1'
04FE  01CC  	CLRF __rem_32_3_00002_arg_b+D'2'
04FF  01CD  	CLRF __rem_32_3_00002_arg_b+D'3'
0500  2135  	CALL __rem_32_3_00002
0501  0853  	MOVF CompTempVarRet212, W
0502  00B0  	MOVWF gbl_FCV_POM
0503  0854  	MOVF CompTempVarRet212+D'1', W
0504  00B1  	MOVWF gbl_FCV_POM+D'1'

	FCV_GLAVNA_SIFRA = FCV_GLAVNA_SIFRA / 10;
0505  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
0506  00D4  	MOVWF __div_32_3_00001_arg_a
0507  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
0508  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
0509  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
050A  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
050B  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
050C  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
050D  300A  	MOVLW 0x0A
050E  00D8  	MOVWF __div_32_3_00001_arg_b
050F  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
0510  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
0511  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
0512  20C6  	CALL __div_32_3_00001
0513  0861  	MOVF CompTempVarRet210, W
0514  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
0515  0862  	MOVF CompTempVarRet210+D'1', W
0516  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
0517  0863  	MOVF CompTempVarRet210+D'2', W
0518  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
0519  0864  	MOVF CompTempVarRet210+D'3', W
051A  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Call Component Macro
	//Call Component Macro: Write(2, pom)
	FCD_EEPROM0_WriteEEPROM(2, FCV_POM);
051B  3002  	MOVLW 0x02
051C  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
051D  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
051E  0830  	MOVF gbl_FCV_POM, W
051F  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0520  0831  	MOVF gbl_FCV_POM+D'1', W
0521  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
0522  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0523  3014  	MOVLW 0x14
0524  1303  	BCF STATUS, RP1
0525  00CA  	MOVWF delay_ms_00000_arg_del
0526  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  pom = glavna_sifra % 10
	//  glavna_sifra = glavna_sifra / 10
	FCV_POM = FCV_GLAVNA_SIFRA % 10;
0527  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
0528  00C6  	MOVWF __rem_32_3_00002_arg_a
0529  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
052A  00C7  	MOVWF __rem_32_3_00002_arg_a+D'1'
052B  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
052C  00C8  	MOVWF __rem_32_3_00002_arg_a+D'2'
052D  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
052E  00C9  	MOVWF __rem_32_3_00002_arg_a+D'3'
052F  300A  	MOVLW 0x0A
0530  00CA  	MOVWF __rem_32_3_00002_arg_b
0531  01CB  	CLRF __rem_32_3_00002_arg_b+D'1'
0532  01CC  	CLRF __rem_32_3_00002_arg_b+D'2'
0533  01CD  	CLRF __rem_32_3_00002_arg_b+D'3'
0534  2135  	CALL __rem_32_3_00002
0535  0853  	MOVF CompTempVarRet212, W
0536  00B0  	MOVWF gbl_FCV_POM
0537  0854  	MOVF CompTempVarRet212+D'1', W
0538  00B1  	MOVWF gbl_FCV_POM+D'1'

	FCV_GLAVNA_SIFRA = FCV_GLAVNA_SIFRA / 10;
0539  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
053A  00D4  	MOVWF __div_32_3_00001_arg_a
053B  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
053C  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
053D  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
053E  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
053F  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
0540  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
0541  300A  	MOVLW 0x0A
0542  00D8  	MOVWF __div_32_3_00001_arg_b
0543  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
0544  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
0545  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
0546  20C6  	CALL __div_32_3_00001
0547  0861  	MOVF CompTempVarRet210, W
0548  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
0549  0862  	MOVF CompTempVarRet210+D'1', W
054A  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
054B  0863  	MOVF CompTempVarRet210+D'2', W
054C  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
054D  0864  	MOVF CompTempVarRet210+D'3', W
054E  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Call Component Macro
	//Call Component Macro: Write(1, pom)
	FCD_EEPROM0_WriteEEPROM(1, FCV_POM);
054F  3001  	MOVLW 0x01
0550  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
0551  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
0552  0830  	MOVF gbl_FCV_POM, W
0553  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0554  0831  	MOVF gbl_FCV_POM+D'1', W
0555  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
0556  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0557  3014  	MOVLW 0x14
0558  1303  	BCF STATUS, RP1
0559  00CA  	MOVWF delay_ms_00000_arg_del
055A  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  pom = glavna_sifra % 10
	//  glavna_sifra = glavna_sifra / 10
	FCV_POM = FCV_GLAVNA_SIFRA % 10;
055B  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
055C  00C6  	MOVWF __rem_32_3_00002_arg_a
055D  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
055E  00C7  	MOVWF __rem_32_3_00002_arg_a+D'1'
055F  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
0560  00C8  	MOVWF __rem_32_3_00002_arg_a+D'2'
0561  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
0562  00C9  	MOVWF __rem_32_3_00002_arg_a+D'3'
0563  300A  	MOVLW 0x0A
0564  00CA  	MOVWF __rem_32_3_00002_arg_b
0565  01CB  	CLRF __rem_32_3_00002_arg_b+D'1'
0566  01CC  	CLRF __rem_32_3_00002_arg_b+D'2'
0567  01CD  	CLRF __rem_32_3_00002_arg_b+D'3'
0568  2135  	CALL __rem_32_3_00002
0569  0853  	MOVF CompTempVarRet212, W
056A  00B0  	MOVWF gbl_FCV_POM
056B  0854  	MOVF CompTempVarRet212+D'1', W
056C  00B1  	MOVWF gbl_FCV_POM+D'1'

	FCV_GLAVNA_SIFRA = FCV_GLAVNA_SIFRA / 10;
056D  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
056E  00D4  	MOVWF __div_32_3_00001_arg_a
056F  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
0570  00D5  	MOVWF __div_32_3_00001_arg_a+D'1'
0571  082A  	MOVF gbl_FCV_GLAVNA_SIFRA+D'2', W
0572  00D6  	MOVWF __div_32_3_00001_arg_a+D'2'
0573  082B  	MOVF gbl_FCV_GLAVNA_SIFRA+D'3', W
0574  00D7  	MOVWF __div_32_3_00001_arg_a+D'3'
0575  300A  	MOVLW 0x0A
0576  00D8  	MOVWF __div_32_3_00001_arg_b
0577  01D9  	CLRF __div_32_3_00001_arg_b+D'1'
0578  01DA  	CLRF __div_32_3_00001_arg_b+D'2'
0579  01DB  	CLRF __div_32_3_00001_arg_b+D'3'
057A  20C6  	CALL __div_32_3_00001
057B  0861  	MOVF CompTempVarRet210, W
057C  00A8  	MOVWF gbl_FCV_GLAVNA_SIFRA
057D  0862  	MOVF CompTempVarRet210+D'1', W
057E  00A9  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'1'
057F  0863  	MOVF CompTempVarRet210+D'2', W
0580  00AA  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'2'
0581  0864  	MOVF CompTempVarRet210+D'3', W
0582  00AB  	MOVWF gbl_FCV_GLAVNA_SIFRA+D'3'


	//Call Component Macro
	//Call Component Macro: Write(0, pom)
	FCD_EEPROM0_WriteEEPROM(0, FCV_POM);
0583  01C6  	CLRF FCD_EEPROM_00054_arg_addr
0584  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
0585  0830  	MOVF gbl_FCV_POM, W
0586  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0587  0831  	MOVF gbl_FCV_POM+D'1', W
0588  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
0589  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
058A  3014  	MOVLW 0x14
058B  1303  	BCF STATUS, RP1
058C  00CA  	MOVWF delay_ms_00000_arg_del
058D  2010  	CALL delay_ms_00000


	//Calculation
	//Calculation:
	//  pom = glavna_sifra
	FCV_POM = FCV_GLAVNA_SIFRA;
058E  0828  	MOVF gbl_FCV_GLAVNA_SIFRA, W
058F  00B0  	MOVWF gbl_FCV_POM
0590  0829  	MOVF gbl_FCV_GLAVNA_SIFRA+D'1', W
0591  00B1  	MOVWF gbl_FCV_POM+D'1'


	//Call Component Macro
	//Call Component Macro: Write(0, pom2)
	FCD_EEPROM0_WriteEEPROM(0, FCV_POM2);
0592  01C6  	CLRF FCD_EEPROM_00054_arg_addr
0593  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
0594  082E  	MOVF gbl_FCV_POM2, W
0595  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0596  082F  	MOVF gbl_FCV_POM2+D'1', W
0597  00C9  	MOVWF FCD_EEPROM_00054_arg_data+D'1'
0598  2456  	CALL FCD_EEPROM_00054


	//Calculation
	//Calculation:
	//  novi = 0
	FCV_NOVI = 0;
0599  1303  	BCF STATUS, RP1
059A  103D  	BCF gbl_FCV_NOVI,0


}
059B  0008  	RETURN



void FCM_setup()

{

	//Call Component Macro
	//Call Component Macro: Write(0, 1)
	FCD_EEPROM0_WriteEEPROM(0, 1);
0675  1683  	BSF STATUS, RP0
0676  1303  	BCF STATUS, RP1
0677  01C6  	CLRF FCD_EEPROM_00054_arg_addr
0678  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
0679  3001  	MOVLW 0x01
067A  00C8  	MOVWF FCD_EEPROM_00054_arg_data
067B  01C9  	CLRF FCD_EEPROM_00054_arg_data+D'1'
067C  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
067D  3014  	MOVLW 0x14
067E  1303  	BCF STATUS, RP1
067F  00CA  	MOVWF delay_ms_00000_arg_del
0680  2010  	CALL delay_ms_00000


	//Call Component Macro
	//Call Component Macro: Write(1, 2)
	FCD_EEPROM0_WriteEEPROM(1, 2);
0681  3001  	MOVLW 0x01
0682  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
0683  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
0684  3002  	MOVLW 0x02
0685  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0686  01C9  	CLRF FCD_EEPROM_00054_arg_data+D'1'
0687  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0688  3014  	MOVLW 0x14
0689  1303  	BCF STATUS, RP1
068A  00CA  	MOVWF delay_ms_00000_arg_del
068B  2010  	CALL delay_ms_00000


	//Call Component Macro
	//Call Component Macro: Write(2, 3)
	FCD_EEPROM0_WriteEEPROM(2, 3);
068C  3002  	MOVLW 0x02
068D  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
068E  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
068F  3003  	MOVLW 0x03
0690  00C8  	MOVWF FCD_EEPROM_00054_arg_data
0691  01C9  	CLRF FCD_EEPROM_00054_arg_data+D'1'
0692  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
0693  3014  	MOVLW 0x14
0694  1303  	BCF STATUS, RP1
0695  00CA  	MOVWF delay_ms_00000_arg_del
0696  2010  	CALL delay_ms_00000


	//Call Component Macro
	//Call Component Macro: Write(3, 4)
	FCD_EEPROM0_WriteEEPROM(3, 4);
0697  3003  	MOVLW 0x03
0698  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
0699  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
069A  3004  	MOVLW 0x04
069B  00C8  	MOVWF FCD_EEPROM_00054_arg_data
069C  01C9  	CLRF FCD_EEPROM_00054_arg_data+D'1'
069D  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
069E  3014  	MOVLW 0x14
069F  1303  	BCF STATUS, RP1
06A0  00CA  	MOVWF delay_ms_00000_arg_del
06A1  2010  	CALL delay_ms_00000


	//Call Component Macro
	//Call Component Macro: Write(4, 5)
	FCD_EEPROM0_WriteEEPROM(4, 5);
06A2  3004  	MOVLW 0x04
06A3  00C6  	MOVWF FCD_EEPROM_00054_arg_addr
06A4  01C7  	CLRF FCD_EEPROM_00054_arg_addr+D'1'
06A5  3005  	MOVLW 0x05
06A6  00C8  	MOVWF FCD_EEPROM_00054_arg_data
06A7  01C9  	CLRF FCD_EEPROM_00054_arg_data+D'1'
06A8  2456  	CALL FCD_EEPROM_00054


	//Delay
	//Delay: 20 ms
	delay_ms(20);
06A9  3014  	MOVLW 0x14
06AA  1303  	BCF STATUS, RP1
06AB  00CA  	MOVWF delay_ms_00000_arg_del
06AC  2010  	CALL delay_ms_00000


}
06AD  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
0893  3007  	MOVLW 0x07
0894  1683  	BSF STATUS, RP0
0895  1303  	BCF STATUS, RP1
0896  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0897  30C0  	MOVLW 0xC0
0898  0081  	MOVWF gbl_option_reg



	//Calculation
	//Calculation:
	//  value = 0
	//  otkljucan = 0
	//  novi = 0
	//  zvz = ""
	//  glavna_sifra_string = ""
	//  upisana_sifra = ""
	FCV_VALUE = 0;
0899  01B2  	CLRF gbl_FCV_VALUE
089A  01B3  	CLRF gbl_FCV_VALUE+D'1'

	FCV_OTKLJUCAN = 0;
089B  10BD  	BCF gbl_FCV_OTKLJUCAN,1

	FCV_NOVI = 0;
089C  103D  	BCF gbl_FCV_NOVI,0

	FCI_SCOPY("",0, FCV_ZVZ,FCSZ_ZVZ);
089D  01C4  	CLRF CompTempVar2320
089E  3000  	MOVLW HIGH(CompTempVar2320+D'0')
089F  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
08A0  30C4  	MOVLW LOW(CompTempVar2320+D'0')
08A1  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
08A2  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
08A3  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
08A4  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
08A5  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
08A6  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
08A7  3014  	MOVLW 0x14
08A8  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
08A9  118A  	BCF PCLATH,3
08AA  26AE  	CALL FCI_SCOPY_00000

	FCI_SCOPY("",0, FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING);
08AB  01C4  	CLRF CompTempVar2323
08AC  3000  	MOVLW HIGH(CompTempVar2323+D'0')
08AD  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
08AE  30C4  	MOVLW LOW(CompTempVar2323+D'0')
08AF  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
08B0  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
08B1  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
08B2  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
08B3  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
08B4  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
08B5  3014  	MOVLW 0x14
08B6  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
08B7  26AE  	CALL FCI_SCOPY_00000

	FCI_SCOPY("",0, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
08B8  01C4  	CLRF CompTempVar2326
08B9  3000  	MOVLW HIGH(CompTempVar2326+D'0')
08BA  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
08BB  30C4  	MOVLW LOW(CompTempVar2326+D'0')
08BC  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
08BD  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
08BE  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
08BF  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
08C0  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
08C1  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
08C2  3014  	MOVLW 0x14
08C3  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
08C4  26AE  	CALL FCI_SCOPY_00000


	//Call Macro
	//Call Macro: setup()
	FCM_setup();
08C5  2675  	CALL FCM_setup_00000


	//Call Macro
	//Call Macro: ucitavanje_sifre()
	FCM_ucitavanje_sifre();
08C6  259C  	CALL FCM_ucitav_00051


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
08C7  2788  	CALL FCD_LCDDis_00056


	//Loop
	//Loop: While 1
	while (1)
08C8        label97

	{

		//Decision
		//Decision: otkljucan = 1?
		if (FCV_OTKLJUCAN == 1)
08C8  158A  	BSF PCLATH,3
08C9  1CBD  	BTFSS gbl_FCV_OTKLJUCAN,1
08CA  28FD  	GOTO	label98
08FD        label98

		{

			//Output
			//Output: 0 -> C1
			trisc = trisc & 0xFD;
08CB  30FD  	MOVLW 0xFD
08CC  0507  	ANDWF gbl_trisc, W
08CD  0087  	MOVWF gbl_trisc

			if ((0))
				portc = (portc & 0xFD) | 0x02;
			else
				portc = portc & 0xFD;
08CE  30FD  	MOVLW 0xFD
08CF  1283  	BCF STATUS, RP0
08D0  0507  	ANDWF gbl_portc, W
08D1  0087  	MOVWF gbl_portc


			//Call Component Macro
			//Call Component Macro: Cursor(0, 0)
			FCD_LCDDisplay0_Cursor(0, 0);
08D2  1683  	BSF STATUS, RP0
08D3  01C6  	CLRF FCD_LCDDis_0005A_arg_x
08D4  01C7  	CLRF FCD_LCDDis_0005A_arg_y
08D5  118A  	BCF PCLATH,3
08D6  2766  	CALL FCD_LCDDis_0005A


			//Call Component Macro
			//Call Component Macro: PrintString("Sef otkljucan  ")
			FCD_LCDDisplay0_PrintString("Sef otkljucan  ", 15);
08D7  3020  	MOVLW 0x20
08D8  00CB  	MOVWF CompTempVar2329+D'3'
08D9  00D5  	MOVWF CompTempVar2329+D'13'
08DA  00D6  	MOVWF CompTempVar2329+D'14'
08DB  3053  	MOVLW 0x53
08DC  00C8  	MOVWF CompTempVar2329
08DD  3061  	MOVLW 0x61
08DE  00D3  	MOVWF CompTempVar2329+D'11'
08DF  3063  	MOVLW 0x63
08E0  00D2  	MOVWF CompTempVar2329+D'10'
08E1  3065  	MOVLW 0x65
08E2  00C9  	MOVWF CompTempVar2329+D'1'
08E3  3066  	MOVLW 0x66
08E4  00CA  	MOVWF CompTempVar2329+D'2'
08E5  306A  	MOVLW 0x6A
08E6  00D0  	MOVWF CompTempVar2329+D'8'
08E7  306B  	MOVLW 0x6B
08E8  00CE  	MOVWF CompTempVar2329+D'6'
08E9  306C  	MOVLW 0x6C
08EA  00CF  	MOVWF CompTempVar2329+D'7'
08EB  306E  	MOVLW 0x6E
08EC  00D4  	MOVWF CompTempVar2329+D'12'
08ED  306F  	MOVLW 0x6F
08EE  00CC  	MOVWF CompTempVar2329+D'4'
08EF  3074  	MOVLW 0x74
08F0  00CD  	MOVWF CompTempVar2329+D'5'
08F1  3075  	MOVLW 0x75
08F2  00D1  	MOVWF CompTempVar2329+D'9'
08F3  01D7  	CLRF CompTempVar2329+D'15'
08F4  3000  	MOVLW HIGH(CompTempVar2329+D'0')
08F5  00C7  	MOVWF FCD_LCDDis_0005C_arg_String+D'1'
08F6  30C8  	MOVLW LOW(CompTempVar2329+D'0')
08F7  00C6  	MOVWF FCD_LCDDis_0005C_arg_String
08F8  300F  	MOVLW 0x0F
08F9  00D8  	MOVWF FCD_LCDDis_0005C_arg_MSZ_String
08FA  274A  	CALL FCD_LCDDis_0005C


		} else {
08FB  158A  	BSF PCLATH,3
08FC  2947  	GOTO	label100
0A76  158A  	BSF PCLATH,3
0A77  120A  	BCF PCLATH,4
0A78  2A6A  	GOTO	label105


			//Decision
			//Decision: novi = 0?
			if (FCV_NOVI == 0)
08FD  183D  	BTFSC gbl_FCV_NOVI,0
08FE  292A  	GOTO	label99
092A        label99

			{

				//Call Component Macro
				//Call Component Macro: Cursor(0, 0)
				FCD_LCDDisplay0_Cursor(0, 0);
08FF  01C6  	CLRF FCD_LCDDis_0005A_arg_x
0900  01C7  	CLRF FCD_LCDDis_0005A_arg_y
0901  118A  	BCF PCLATH,3
0902  2766  	CALL FCD_LCDDis_0005A


				//Call Component Macro
				//Call Component Macro: PrintString("Password:")
				FCD_LCDDisplay0_PrintString("Password:", 9);
0903  3050  	MOVLW 0x50
0904  00C8  	MOVWF CompTempVar2331
0905  3061  	MOVLW 0x61
0906  00C9  	MOVWF CompTempVar2331+D'1'
0907  3073  	MOVLW 0x73
0908  00CA  	MOVWF CompTempVar2331+D'2'
0909  00CB  	MOVWF CompTempVar2331+D'3'
090A  3077  	MOVLW 0x77
090B  00CC  	MOVWF CompTempVar2331+D'4'
090C  306F  	MOVLW 0x6F
090D  00CD  	MOVWF CompTempVar2331+D'5'
090E  3072  	MOVLW 0x72
090F  00CE  	MOVWF CompTempVar2331+D'6'
0910  3064  	MOVLW 0x64
0911  00CF  	MOVWF CompTempVar2331+D'7'
0912  303A  	MOVLW 0x3A
0913  00D0  	MOVWF CompTempVar2331+D'8'
0914  01D1  	CLRF CompTempVar2331+D'9'
0915  3000  	MOVLW HIGH(CompTempVar2331+D'0')
0916  00C7  	MOVWF FCD_LCDDis_0005C_arg_String+D'1'
0917  30C8  	MOVLW LOW(CompTempVar2331+D'0')
0918  00C6  	MOVWF FCD_LCDDis_0005C_arg_String
0919  3009  	MOVLW 0x09
091A  00D8  	MOVWF FCD_LCDDis_0005C_arg_MSZ_String
091B  274A  	CALL FCD_LCDDis_0005C


				//Output
				//Output: 2 -> PORTC
				trisc = trisc & 0xFC;
091C  30FC  	MOVLW 0xFC
091D  0507  	ANDWF gbl_trisc, W
091E  0087  	MOVWF gbl_trisc

				portc = (portc & 0xFC) | ((2) & 0x03);
091F  30FC  	MOVLW 0xFC
0920  1283  	BCF STATUS, RP0
0921  0507  	ANDWF gbl_portc, W
0922  1683  	BSF STATUS, RP0
0923  00C2  	MOVWF CompTempVar2333
0924  3002  	MOVLW 0x02
0925  0442  	IORWF CompTempVar2333, W
0926  1283  	BCF STATUS, RP0
0927  0087  	MOVWF gbl_portc


			} else {
0928  158A  	BSF PCLATH,3
0929  2947  	GOTO	label100
0947        label100


				//Call Component Macro
				//Call Component Macro: Cursor(0, 0)
				FCD_LCDDisplay0_Cursor(0, 0);
092A  01C6  	CLRF FCD_LCDDis_0005A_arg_x
092B  01C7  	CLRF FCD_LCDDis_0005A_arg_y
092C  118A  	BCF PCLATH,3
092D  2766  	CALL FCD_LCDDis_0005A


				//Call Component Macro
				//Call Component Macro: PrintString("New pass:")
				FCD_LCDDisplay0_PrintString("New pass:", 9);
092E  304E  	MOVLW 0x4E
092F  00C8  	MOVWF CompTempVar2334
0930  3065  	MOVLW 0x65
0931  00C9  	MOVWF CompTempVar2334+D'1'
0932  3077  	MOVLW 0x77
0933  00CA  	MOVWF CompTempVar2334+D'2'
0934  3020  	MOVLW 0x20
0935  00CB  	MOVWF CompTempVar2334+D'3'
0936  3070  	MOVLW 0x70
0937  00CC  	MOVWF CompTempVar2334+D'4'
0938  3061  	MOVLW 0x61
0939  00CD  	MOVWF CompTempVar2334+D'5'
093A  3073  	MOVLW 0x73
093B  00CE  	MOVWF CompTempVar2334+D'6'
093C  00CF  	MOVWF CompTempVar2334+D'7'
093D  303A  	MOVLW 0x3A
093E  00D0  	MOVWF CompTempVar2334+D'8'
093F  01D1  	CLRF CompTempVar2334+D'9'
0940  3000  	MOVLW HIGH(CompTempVar2334+D'0')
0941  00C7  	MOVWF FCD_LCDDis_0005C_arg_String+D'1'
0942  30C8  	MOVLW LOW(CompTempVar2334+D'0')
0943  00C6  	MOVWF FCD_LCDDis_0005C_arg_String
0944  3009  	MOVLW 0x09
0945  00D8  	MOVWF FCD_LCDDis_0005C_arg_MSZ_String
0946  274A  	CALL FCD_LCDDis_0005C


			}

		}

		//Call Component Macro
		//Call Component Macro: value=GetKeypadNumber()
		FCV_VALUE = FCD_KeyPad0_GetKeypadNumber();
0947  118A  	BCF PCLATH,3
0948  27DE  	CALL FCD_KeyPad_00061
0949  084E  	MOVF CompTempVarRet2269, W
094A  00B2  	MOVWF gbl_FCV_VALUE
094B  01B3  	CLRF gbl_FCV_VALUE+D'1'


		//Decision
		//Decision: value != 255?
		if (FCV_VALUE != 255)
094C  30FF  	MOVLW 0xFF
094D  0632  	XORWF gbl_FCV_VALUE, W
094E  1903  	BTFSC STATUS,Z
094F  0833  	MOVF gbl_FCV_VALUE+D'1', W
0950  158A  	BSF PCLATH,3
0951  120A  	BCF PCLATH,4
0952  1903  	BTFSC STATUS,Z
0953  28C8  	GOTO	label97

		{

			//Decision
			//Decision: value = 10 AND otkljucan = 1?
			if (FCV_VALUE == 10 & FCV_OTKLJUCAN == 1)
0954  01C3  	CLRF CompTempVar2337
0955  300A  	MOVLW 0x0A
0956  0232  	SUBWF gbl_FCV_VALUE, W
0957  1903  	BTFSC STATUS,Z
0958  0833  	MOVF gbl_FCV_VALUE+D'1', W
0959  1903  	BTFSC STATUS,Z
095A  0AC3  	INCF CompTempVar2337, F
095B  01C2  	CLRF CompTempVar2336
095C  18BD  	BTFSC gbl_FCV_OTKLJUCAN,1
095D  0AC2  	INCF CompTempVar2336, F
095E  0842  	MOVF CompTempVar2336, W
095F  0543  	ANDWF CompTempVar2337, W
0960  1903  	BTFSC STATUS,Z
0961  2973  	GOTO	label101
0973        label101

			{

				//Calculation
				//Calculation:
				//  novi = 1
				//  otkljucan = 0
				//  upisana_sifra = ""
				FCV_NOVI = 1;
0962  143D  	BSF gbl_FCV_NOVI,0

				FCV_OTKLJUCAN = 0;
0963  10BD  	BCF gbl_FCV_OTKLJUCAN,1

				FCI_SCOPY("",0, FCV_UPISANA_SIFRA,FCSZ_UPISANA_SIFRA);
0964  01C8  	CLRF CompTempVar2340
0965  3000  	MOVLW HIGH(CompTempVar2340+D'0')
0966  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
0967  30C8  	MOVLW LOW(CompTempVar2340+D'0')
0968  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
0969  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
096A  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
096B  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
096C  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
096D  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
096E  3014  	MOVLW 0x14
096F  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
0970  118A  	BCF PCLATH,3
0971  26AE  	CALL FCI_SCOPY_00000


				//Call Component Macro
				//Call Component Macro: Clear()
				FCD_LCDDisplay0_Clear();
0972  2777  	CALL FCD_LCDDis_00057


			// } else {

			}

			//Decision
			//Decision: value = 11?
			if (FCV_VALUE == 11)
0973  300B  	MOVLW 0x0B
0974  0632  	XORWF gbl_FCV_VALUE, W
0975  1903  	BTFSC STATUS,Z
0976  0833  	MOVF gbl_FCV_VALUE+D'1', W
0977  158A  	BSF PCLATH,3
0978  1D03  	BTFSS STATUS,Z
0979  2A19  	GOTO	label104

			{

				//Decision
				//Decision: novi = 0?
				if (FCV_NOVI == 0)
097A  183D  	BTFSC gbl_FCV_NOVI,0
097B  29CC  	GOTO	label103
09CC        label103

				{

					//Decision
					//Decision: Compare$ (glavna_sifra_string,upisana_sifra,0)?
					if (FCI_COMPARE(FCV_GLAVNA_SIFRA_STRING, FCSZ_GLAVNA_SIFRA_STRING, FCV_UPISANA_SIFRA, FCSZ_UPISANA_SIFRA, 0))
097C  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
097D  00C7  	MOVWF FCI_COMPAR_0004C_arg_sSrc1+D'1'
097E  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
097F  00C6  	MOVWF FCI_COMPAR_0004C_arg_sSrc1
0980  3014  	MOVLW 0x14
0981  00C8  	MOVWF FCI_COMPAR_0004C_arg_iSrc1_len
0982  3000  	MOVLW HIGH(gbl_FCV_UPISANA_SIFRA+D'0')
0983  00CA  	MOVWF FCI_COMPAR_0004C_arg_sSrc2+D'1'
0984  3020  	MOVLW LOW(gbl_FCV_UPISANA_SIFRA+D'0')
0985  00C9  	MOVWF FCI_COMPAR_0004C_arg_sSrc2
0986  3014  	MOVLW 0x14
0987  00CB  	MOVWF FCI_COMPAR_0004C_arg_iSrc2_len
0988  01CC  	CLRF FCI_COMPAR_0004C_arg_iNoCase
0989  118A  	BCF PCLATH,3
098A  26E2  	CALL FCI_COMPAR_0004C
098B  08D1  	MOVF CompTempVarRet2027, F
098C  158A  	BSF PCLATH,3
098D  1903  	BTFSC STATUS,Z
098E  29AE  	GOTO	label102
09AE        label102

					{

						//Calculation
						//Calculation:
						//  otkljucan = 0
						//  glavna_sifra_string = ""
						//  zvz = ""
						FCV_OTKLJUCAN = 0;
098F  10BD  	BCF gbl_FCV_OTKLJUCAN,1

						FCI_SCOPY("",0, FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING);
0990  01C8  	CLRF CompTempVar2345
0991  3000  	MOVLW HIGH(CompTempVar2345+D'0')
0992  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
0993  30C8  	MOVLW LOW(CompTempVar2345+D'0')
0994  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
0995  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
0996  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0997  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
0998  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0999  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
099A  3014  	MOVLW 0x14
099B  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
099C  118A  	BCF PCLATH,3
099D  26AE  	CALL FCI_SCOPY_00000

						FCI_SCOPY("",0, FCV_ZVZ,FCSZ_ZVZ);
099E  01C8  	CLRF CompTempVar2348
099F  3000  	MOVLW HIGH(CompTempVar2348+D'0')
09A0  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
09A1  30C8  	MOVLW LOW(CompTempVar2348+D'0')
09A2  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
09A3  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
09A4  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
09A5  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
09A6  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
09A7  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
09A8  3014  	MOVLW 0x14
09A9  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
09AA  26AE  	CALL FCI_SCOPY_00000


						//Call Component Macro
						//Call Component Macro: Clear()
						FCD_LCDDisplay0_Clear();
09AB  2777  	CALL FCD_LCDDis_00057


					} else {
09AC  158A  	BSF PCLATH,3
09AD  2A19  	GOTO	label104


						//Calculation
						//Calculation:
						//  otkljucan = 1
						//  glavna_sifra_string = ""
						//  zvz = ""
						FCV_OTKLJUCAN = 1;
09AE  14BD  	BSF gbl_FCV_OTKLJUCAN,1

						FCI_SCOPY("",0, FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING);
09AF  01C8  	CLRF CompTempVar2351
09B0  3000  	MOVLW HIGH(CompTempVar2351+D'0')
09B1  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
09B2  30C8  	MOVLW LOW(CompTempVar2351+D'0')
09B3  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
09B4  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
09B5  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
09B6  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
09B7  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
09B8  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
09B9  3014  	MOVLW 0x14
09BA  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
09BB  118A  	BCF PCLATH,3
09BC  26AE  	CALL FCI_SCOPY_00000

						FCI_SCOPY("",0, FCV_ZVZ,FCSZ_ZVZ);
09BD  01C8  	CLRF CompTempVar2354
09BE  3000  	MOVLW HIGH(CompTempVar2354+D'0')
09BF  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
09C0  30C8  	MOVLW LOW(CompTempVar2354+D'0')
09C1  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
09C2  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
09C3  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
09C4  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
09C5  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
09C6  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
09C7  3014  	MOVLW 0x14
09C8  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
09C9  26AE  	CALL FCI_SCOPY_00000


					}

				} else {
09CA  158A  	BSF PCLATH,3
09CB  2A19  	GOTO	label104
0A19        label104


					//Call Macro
					//Call Macro: upisivanje_sifre()
					FCM_upisivanje_sifre();
09CC  118A  	BCF PCLATH,3
09CD  2467  	CALL FCM_upisiv_00053


					//Delay
					//Delay: 20 ms
					delay_ms(20);
09CE  3014  	MOVLW 0x14
09CF  00CA  	MOVWF delay_ms_00000_arg_del
09D0  2010  	CALL delay_ms_00000


					//Call Macro
					//Call Macro: ucitavanje_sifre()
					FCM_ucitavanje_sifre();
09D1  259C  	CALL FCM_ucitav_00051


					//Delay
					//Delay: 2 s
					delay_s(2);
09D2  3002  	MOVLW 0x02
09D3  00C6  	MOVWF delay_s_00000_arg_del
09D4  2094  	CALL delay_s_00000


					//Call Component Macro
					//Call Component Macro: Clear()
					FCD_LCDDisplay0_Clear();
09D5  2777  	CALL FCD_LCDDis_00057


					//Call Component Macro
					//Call Component Macro: Cursor(0, 0)
					FCD_LCDDisplay0_Cursor(0, 0);
09D6  01C6  	CLRF FCD_LCDDis_0005A_arg_x
09D7  01C7  	CLRF FCD_LCDDis_0005A_arg_y
09D8  2766  	CALL FCD_LCDDis_0005A


					//Call Component Macro
					//Call Component Macro: PrintString("Sifra upisana!")
					FCD_LCDDisplay0_PrintString("Sifra upisana!", 14);
09D9  3020  	MOVLW 0x20
09DA  00CD  	MOVWF CompTempVar2357+D'5'
09DB  3021  	MOVLW 0x21
09DC  00D5  	MOVWF CompTempVar2357+D'13'
09DD  3053  	MOVLW 0x53
09DE  00C8  	MOVWF CompTempVar2357
09DF  3061  	MOVLW 0x61
09E0  00CC  	MOVWF CompTempVar2357+D'4'
09E1  00D2  	MOVWF CompTempVar2357+D'10'
09E2  00D4  	MOVWF CompTempVar2357+D'12'
09E3  3066  	MOVLW 0x66
09E4  00CA  	MOVWF CompTempVar2357+D'2'
09E5  3069  	MOVLW 0x69
09E6  00C9  	MOVWF CompTempVar2357+D'1'
09E7  00D0  	MOVWF CompTempVar2357+D'8'
09E8  306E  	MOVLW 0x6E
09E9  00D3  	MOVWF CompTempVar2357+D'11'
09EA  3070  	MOVLW 0x70
09EB  00CF  	MOVWF CompTempVar2357+D'7'
09EC  3072  	MOVLW 0x72
09ED  00CB  	MOVWF CompTempVar2357+D'3'
09EE  3073  	MOVLW 0x73
09EF  00D1  	MOVWF CompTempVar2357+D'9'
09F0  3075  	MOVLW 0x75
09F1  00CE  	MOVWF CompTempVar2357+D'6'
09F2  01D6  	CLRF CompTempVar2357+D'14'
09F3  3000  	MOVLW HIGH(CompTempVar2357+D'0')
09F4  00C7  	MOVWF FCD_LCDDis_0005C_arg_String+D'1'
09F5  30C8  	MOVLW LOW(CompTempVar2357+D'0')
09F6  00C6  	MOVWF FCD_LCDDis_0005C_arg_String
09F7  300E  	MOVLW 0x0E
09F8  00D8  	MOVWF FCD_LCDDis_0005C_arg_MSZ_String
09F9  274A  	CALL FCD_LCDDis_0005C


					//Delay
					//Delay: 2 s
					delay_s(2);
09FA  3002  	MOVLW 0x02
09FB  00C6  	MOVWF delay_s_00000_arg_del
09FC  2094  	CALL delay_s_00000


					//Call Component Macro
					//Call Component Macro: Clear()
					FCD_LCDDisplay0_Clear();
09FD  2777  	CALL FCD_LCDDis_00057


					//Calculation
					//Calculation:
					//  novi = 0
					//  glavna_sifra_string = ""
					//  zvz = ""
					FCV_NOVI = 0;
09FE  103D  	BCF gbl_FCV_NOVI,0

					FCI_SCOPY("",0, FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING);
09FF  01C8  	CLRF CompTempVar2359
0A00  3000  	MOVLW HIGH(CompTempVar2359+D'0')
0A01  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
0A02  30C8  	MOVLW LOW(CompTempVar2359+D'0')
0A03  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
0A04  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
0A05  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A06  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
0A07  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A08  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
0A09  3014  	MOVLW 0x14
0A0A  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
0A0B  26AE  	CALL FCI_SCOPY_00000

					FCI_SCOPY("",0, FCV_ZVZ,FCSZ_ZVZ);
0A0C  01C8  	CLRF CompTempVar2362
0A0D  3000  	MOVLW HIGH(CompTempVar2362+D'0')
0A0E  00C7  	MOVWF FCI_SCOPY_00000_arg_sSrc+D'1'
0A0F  30C8  	MOVLW LOW(CompTempVar2362+D'0')
0A10  00C6  	MOVWF FCI_SCOPY_00000_arg_sSrc
0A11  01C9  	CLRF FCI_SCOPY_00000_arg_iSrc_len
0A12  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
0A13  00CB  	MOVWF FCI_SCOPY_00000_arg_sDst+D'1'
0A14  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
0A15  00CA  	MOVWF FCI_SCOPY_00000_arg_sDst
0A16  3014  	MOVLW 0x14
0A17  00CC  	MOVWF FCI_SCOPY_00000_arg_iDst_len
0A18  26AE  	CALL FCI_SCOPY_00000


				}

			// } else {

			}

			//Decision
			//Decision: value != 11 AND value != 10?
			if (FCV_VALUE != 11 & FCV_VALUE != 10)
0A19  01C5  	CLRF CompTempVar2339
0A1A  0832  	MOVF gbl_FCV_VALUE, W
0A1B  3C0B  	SUBLW 0x0B
0A1C  1903  	BTFSC STATUS,Z
0A1D  0833  	MOVF gbl_FCV_VALUE+D'1', W
0A1E  1D03  	BTFSS STATUS,Z
0A1F  0AC5  	INCF CompTempVar2339, F
0A20  01C4  	CLRF CompTempVar2338
0A21  0832  	MOVF gbl_FCV_VALUE, W
0A22  3C0A  	SUBLW 0x0A
0A23  1903  	BTFSC STATUS,Z
0A24  0833  	MOVF gbl_FCV_VALUE+D'1', W
0A25  1D03  	BTFSS STATUS,Z
0A26  0AC4  	INCF CompTempVar2338, F
0A27  0844  	MOVF CompTempVar2338, W
0A28  0545  	ANDWF CompTempVar2339, W
0A29  158A  	BSF PCLATH,3
0A2A  1903  	BTFSC STATUS,Z
0A2B  2A6A  	GOTO	label105
0A6A        label105

			{

				//Calculation
				//Calculation:
				//  value_string = ToString$ (value)
				//  glavna_sifra_string = glavna_sifra_string + value_string
				//  zvz = zvz + "*"
				FCI_TOSTRING(FCV_VALUE, FCV_VALUE_STRING,FCSZ_VALUE_STRING);
0A2C  0832  	MOVF gbl_FCV_VALUE, W
0A2D  00C6  	MOVWF FCI_TOSTRI_00049_arg_iSrc1
0A2E  0833  	MOVF gbl_FCV_VALUE+D'1', W
0A2F  00C7  	MOVWF FCI_TOSTRI_00049_arg_iSrc1+D'1'
0A30  01C8  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'2'
0A31  01C9  	CLRF FCI_TOSTRI_00049_arg_iSrc1+D'3'
0A32  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0A33  00CB  	MOVWF FCI_TOSTRI_00049_arg_sDst+D'1'
0A34  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
0A35  00CA  	MOVWF FCI_TOSTRI_00049_arg_sDst
0A36  3014  	MOVLW 0x14
0A37  00CC  	MOVWF FCI_TOSTRI_00049_arg_iDst_len
0A38  118A  	BCF PCLATH,3
0A39  2179  	CALL FCI_TOSTRI_00049

				FCI_SHEAD(FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING, FCV_VALUE_STRING,FCSZ_VALUE_STRING, FCV_GLAVNA_SIFRA_STRING,FCSZ_GLAVNA_SIFRA_STRING);
0A3A  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A3B  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
0A3C  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A3D  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
0A3E  3014  	MOVLW 0x14
0A3F  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
0A40  3000  	MOVLW HIGH(gbl_FCV_VALUE_STRING+D'0')
0A41  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
0A42  305C  	MOVLW LOW(gbl_FCV_VALUE_STRING+D'0')
0A43  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
0A44  3014  	MOVLW 0x14
0A45  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
0A46  3000  	MOVLW HIGH(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A47  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
0A48  3034  	MOVLW LOW(gbl_FCV_GLAVNA_SIFRA_STRING+D'0')
0A49  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
0A4A  3014  	MOVLW 0x14
0A4B  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
0A4C  22D5  	CALL FCI_SHEAD_00000

				FCI_SHEAD(FCV_ZVZ,FCSZ_ZVZ, "*",1, FCV_ZVZ,FCSZ_ZVZ);
0A4D  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
0A4E  00C7  	MOVWF FCI_SHEAD_00000_arg_sSrc1+D'1'
0A4F  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
0A50  00C6  	MOVWF FCI_SHEAD_00000_arg_sSrc1
0A51  3014  	MOVLW 0x14
0A52  00C8  	MOVWF FCI_SHEAD_00000_arg_iSrc1_len
0A53  302A  	MOVLW 0x2A
0A54  00CB  	MOVWF CompTempVar2370
0A55  01CC  	CLRF CompTempVar2370+D'1'
0A56  3000  	MOVLW HIGH(CompTempVar2370+D'0')
0A57  00CA  	MOVWF FCI_SHEAD_00000_arg_sSrc2+D'1'
0A58  30CB  	MOVLW LOW(CompTempVar2370+D'0')
0A59  00C9  	MOVWF FCI_SHEAD_00000_arg_sSrc2
0A5A  3001  	MOVLW 0x01
0A5B  00CD  	MOVWF FCI_SHEAD_00000_arg_iSrc2_len
0A5C  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
0A5D  00CF  	MOVWF FCI_SHEAD_00000_arg_sDst+D'1'
0A5E  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
0A5F  00CE  	MOVWF FCI_SHEAD_00000_arg_sDst
0A60  3014  	MOVLW 0x14
0A61  00D0  	MOVWF FCI_SHEAD_00000_arg_iDst_len
0A62  22D5  	CALL FCI_SHEAD_00000


				//Call Component Macro
				//Call Component Macro: PrintString(zvz)
				FCD_LCDDisplay0_PrintString(FCV_ZVZ, FCSZ_ZVZ);
0A63  3000  	MOVLW HIGH(gbl_FCV_ZVZ+D'0')
0A64  00C7  	MOVWF FCD_LCDDis_0005C_arg_String+D'1'
0A65  3048  	MOVLW LOW(gbl_FCV_ZVZ+D'0')
0A66  00C6  	MOVWF FCD_LCDDis_0005C_arg_String
0A67  3014  	MOVLW 0x14
0A68  00D8  	MOVWF FCD_LCDDis_0005C_arg_MSZ_String
0A69  274A  	CALL FCD_LCDDis_0005C


			// } else {

			}

			//Loop
			//Loop: While value != 255
			while (FCV_VALUE != 255)
0A6A  30FF  	MOVLW 0xFF
0A6B  0632  	XORWF gbl_FCV_VALUE, W
0A6C  1903  	BTFSC STATUS,Z
0A6D  0833  	MOVF gbl_FCV_VALUE+D'1', W
0A6E  158A  	BSF PCLATH,3
0A6F  1903  	BTFSC STATUS,Z
0A70  28C8  	GOTO	label97

			{

				//Call Component Macro
				//Call Component Macro: value=GetKeypadNumber()
				FCV_VALUE = FCD_KeyPad0_GetKeypadNumber();
0A71  118A  	BCF PCLATH,3
0A72  27DE  	CALL FCD_KeyPad_00061
0A73  084E  	MOVF CompTempVarRet2269, W
0A74  00B2  	MOVWF gbl_FCV_VALUE
0A75  01B3  	CLRF gbl_FCV_VALUE+D'1'



			}

		// } else {

		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0AA9  0E7E  	SWAPF Int1BContext+D'2', W
0AAA  0084  	MOVWF FSR
0AAB  0E7D  	SWAPF Int1BContext+D'1', W
0AAC  008A  	MOVWF PCLATH
0AAD  0E7C  	SWAPF Int1BContext, W
0AAE  0083  	MOVWF STATUS
0AAF  0EFF  	SWAPF Int1Context, F
0AB0  0E7F  	SWAPF Int1Context, W
0AB1  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL EEPROM File
 *
 * File: PIC_CAL_EEPROM.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 210911 | BR | Created
 */



//EEPROM Function Prototypes
MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address);
void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data);



MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address)

{
	char data = 0;
0125  01CA  	CLRF FC_CAL_EE__00063_1_data

	#ifdef MX_EE
		#ifdef _BOOSTC

			#ifdef EEADR
			  #ifndef MX_EEADR
				#define MX_EEADR eeadr
			  #endif
			#endif
			#ifdef EEADRL
			  #ifndef MX_EEADR
				#define MX_EEADR eeadrl
			  #endif
			#endif

			#ifdef EEDATA
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedata
			  #endif
			#endif
			#ifdef EEDATAL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatal
			  #endif
			#endif
			#ifdef EEDATL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatl
			  #endif
			#endif

			#ifndef MX_EEADR	//Catch Error
				#error "EEPROM error - MX_EEADR not set"
			#endif
			#ifndef MX_EEDATA
				#error "EEPROM error - MX_EEDATA not set"
			#endif

			MX_EEADR = Address & 0xff;
0126  0848  	MOVF FC_CAL_EE__00063_arg_Address, W
0127  1283  	BCF STATUS, RP0
0128  1703  	BSF STATUS, RP1
0129  008D  	MOVWF gbl_eeadr

			#if (MX_EE_SIZE > 256)
				eeadrh = (Address & 0xff00) >> 8;
			#endif
			#ifdef MX_EE_TYPE2
				clear_bit(eecon1, EEPGD);
012A  1683  	BSF STATUS, RP0
012B  138C  	BCF gbl_eecon1,7

			#endif
			#ifdef MX_EE_TYPE3
				clear_bit(eecon1, EEPGD);
				clear_bit(eecon1, CFGS);
			#endif
			set_bit(eecon1, RD);
012C  140C  	BSF gbl_eecon1,0

			data = MX_EEDATA;
012D  1283  	BCF STATUS, RP0
012E  080C  	MOVF gbl_eedata, W
012F  1683  	BSF STATUS, RP0
0130  1303  	BCF STATUS, RP1
0131  00CA  	MOVWF FC_CAL_EE__00063_1_data

		#endif
		#ifdef HI_TECH_C
			data = eeprom_read(Address);
		#endif
	#else
		#error "Chip does not have EEPROM memory"
	#endif
	return (data);
0132  084A  	MOVF FC_CAL_EE__00063_1_data, W
0133  00CB  	MOVWF CompTempVarRet2319

}
0134  0008  	RETURN


void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data)

{
	#ifdef MX_EE
		#ifdef _BOOSTC

			#ifdef EEADR
			  #ifndef MX_EEADR
				#define MX_EEADR eeadr
			  #endif
			#endif
			#ifdef EEADRL
			  #ifndef MX_EEADR
				#define MX_EEADR eeadrl
			  #endif
			#endif

			#ifdef EEDATA
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedata
			  #endif
			#endif
			#ifdef EEDATAL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatal
			  #endif
			#endif
			#ifdef EEDATL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatl
			  #endif
			#endif

			#ifndef MX_EEADR	//Catch Error
				#error "EEPROM error - MX_EEADR not set"
			#endif
			#ifndef MX_EEDATA
				#error "EEPROM error - MX_EEDATA not set"
			#endif

			char bInterruptsEnabled;
			//wait for previous EE writes to complete...
			while (test_bit(eecon1, WR));
00FF        label18
00FF  1703  	BSF STATUS, RP1
0100  188C  	BTFSC gbl_eecon1,1
0101  28FF  	GOTO	label18

			MX_EEADR = Address & 0xff;
0102  1303  	BCF STATUS, RP1
0103  084A  	MOVF FC_CAL_EE__00064_arg_Address, W
0104  1283  	BCF STATUS, RP0
0105  1703  	BSF STATUS, RP1
0106  008D  	MOVWF gbl_eeadr

			#if (MX_EE_SIZE > 256)
				eeadrh = (Address & 0xff00) >> 8;
			#endif
			MX_EEDATA = Data;
0107  1683  	BSF STATUS, RP0
0108  1303  	BCF STATUS, RP1
0109  084C  	MOVF FC_CAL_EE__00064_arg_Data, W
010A  1283  	BCF STATUS, RP0
010B  1703  	BSF STATUS, RP1
010C  008C  	MOVWF gbl_eedata

			#ifdef MX_EE_TYPE2
				clear_bit(eecon1, EEPGD);
010D  1683  	BSF STATUS, RP0
010E  138C  	BCF gbl_eecon1,7

			#endif
			#ifdef MX_EE_TYPE3
				clear_bit(eecon1, EEPGD);
				clear_bit(eecon1, CFGS);
			#endif
			set_bit(eecon1, WREN);
010F  150C  	BSF gbl_eecon1,2

			bInterruptsEnabled = test_bit(intcon, GIE);
0110  3080  	MOVLW 0x80
0111  050B  	ANDWF gbl_intcon, W
0112  1303  	BCF STATUS, RP1
0113  00CD  	MOVWF FC_CAL_EE__00064_1_bInterr_00065

			clear_bit(intcon, GIE);			//Disable Interrupts
0114  138B  	BCF gbl_intcon,7

			eecon2 = 0x55;
0115  3055  	MOVLW 0x55
0116  1703  	BSF STATUS, RP1
0117  008D  	MOVWF gbl_eecon2

			eecon2 = 0xAA;
0118  30AA  	MOVLW 0xAA
0119  008D  	MOVWF gbl_eecon2

			set_bit(eecon1, WR);
011A  148C  	BSF gbl_eecon1,1

			while (test_bit(eecon1, WR));	//wait for EE write to complete...
011B        label19
011B  188C  	BTFSC gbl_eecon1,1
011C  291B  	GOTO	label19

			if (bInterruptsEnabled)
011D  1303  	BCF STATUS, RP1
011E  08CD  	MOVF FC_CAL_EE__00064_1_bInterr_00065, F
011F  1903  	BTFSC STATUS,Z
0120  2922  	GOTO	label20
0122        label20

				set_bit(intcon, GIE);		//Re-enable Interrupts
0121  178B  	BSF gbl_intcon,7

			clear_bit(eecon1, WREN);
0122  1703  	BSF STATUS, RP1
0123  110C  	BCF gbl_eecon1,2

		#endif
		#ifdef HI_TECH_C
			eeprom_write(Address, Data);
		#endif
	#else
		#error "Chip does not have EEPROM memory"
	#endif
}
0124  0008  	RETURN



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  158A  	BSF PCLATH,3
0001  2A79  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  00FC  	MOVWF Int1BContext
0007  0E0A  	SWAPF PCLATH, W
0008  00FD  	MOVWF Int1BContext+D'1'
0009  0E04  	SWAPF FSR, W
000A  00FE  	MOVWF Int1BContext+D'2'
000B  158A  	BSF PCLATH,3
000C  120A  	BCF PCLATH,4
000D  2AA9  	GOTO	interrupt

0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08CA  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  3EFF  	ADDLW 0xFF
001C  1D03  	BTFSS STATUS,Z
001D  2815  	GOTO	label2
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0BCA  	DECFSZ delay_ms_00000_arg_del, F
0026  2814  	GOTO	label1
0027  0008  	RETURN
0028        ; } delay_ms function end

0028        delay_10us_00000
0028        ; { delay_10us ; function begin
0028  08DD  	MOVF delay_10us_00000_arg_del, F
0029  1D03  	BTFSS STATUS,Z
002A  282C  	GOTO	label3
002B  0008  	RETURN
002C        label3
002C  3004  	MOVLW 0x04
002D        label4
002D  0000  	NOP
002E  3EFF  	ADDLW 0xFF
002F  1D03  	BTFSS STATUS,Z
0030  282D  	GOTO	label4
0031  0000  	NOP
0032  0000  	NOP
0033  0BDD  	DECFSZ delay_10us_00000_arg_del, F
0034  282C  	GOTO	label3
0035  0008  	RETURN
0036        ; } delay_10us function end

0036        delay_us_00000
0036        ; { delay_us ; function begin
0036  3001  	MOVLW 0x01
0037  07C9  	ADDWF delay_us_00000_arg_del, F
0038  0CC9  	RRF delay_us_00000_arg_del, F
0039  30FF  	MOVLW 0xFF
003A  05C9  	ANDWF delay_us_00000_arg_del, F
003B        label5
003B  0000  	NOP
003C  0000  	NOP
003D  0BC9  	DECFSZ delay_us_00000_arg_del, F
003E  283B  	GOTO	label5
003F  0008  	RETURN
0040        ; } delay_us function end

0040        __rom_get_00000
0040        ; { __rom_get ; function begin
0040  0849  	MOVF __rom_get_00000_arg_objNumb, W
0041  00D1  	MOVWF __rom_get_00000_1_romAddr+D'1'
0042  01D0  	CLRF __rom_get_00000_1_romAddr
0043  1003  	BCF STATUS,C
0044  0DD1  	RLF __rom_get_00000_1_romAddr+D'1', F
0045  0DD0  	RLF __rom_get_00000_1_romAddr, F
0046  0DD1  	RLF __rom_get_00000_1_romAddr+D'1', F
0047  0DD0  	RLF __rom_get_00000_1_romAddr, F
0048  07D1  	ADDWF __rom_get_00000_1_romAddr+D'1', F
0049  1803  	BTFSC STATUS,C
004A  0AD0  	INCF __rom_get_00000_1_romAddr, F
004B  07D1  	ADDWF __rom_get_00000_1_romAddr+D'1', F
004C  1803  	BTFSC STATUS,C
004D  0AD0  	INCF __rom_get_00000_1_romAddr, F
004E  3059  	MOVLW	LOW( label6 )
004F  07D1  	ADDWF __rom_get_00000_1_romAddr+D'1', F
0050  1803  	BTFSC STATUS,C
0051  0AD0  	INCF __rom_get_00000_1_romAddr, F
0052  3000  	MOVLW	HIGH( label6 )
0053  0750  	ADDWF __rom_get_00000_1_romAddr, W
0054  008A  	MOVWF PCLATH
0055  084A  	MOVF __rom_get_00000_arg_idx, W
0056  00D0  	MOVWF __rom_get_00000_1_romAddr
0057  0851  	MOVF __rom_get_00000_1_romAddr+D'1', W
0058  0082  	MOVWF PCL
0059        label6
0059  3000  	MOVLW	HIGH( label7 )
005A  008A  	MOVWF PCLATH
005B  3000  	MOVLW	HIGH( label8 )
005C  00D1  	MOVWF __rom_get_00000_1_romAddr+D'1'
005D  3075  	MOVLW	LOW( label8 )
005E  286E  	GOTO	label7
005F  3000  	MOVLW	HIGH( label7 )
0060  008A  	MOVWF PCLATH
0061  3000  	MOVLW	HIGH( label9 )
0062  00D1  	MOVWF __rom_get_00000_1_romAddr+D'1'
0063  3078  	MOVLW	LOW( label9 )
0064  286E  	GOTO	label7
0065  3000  	MOVLW	HIGH( label7 )
0066  008A  	MOVWF PCLATH
0067  3000  	MOVLW	HIGH( label10 )
0068  00D1  	MOVWF __rom_get_00000_1_romAddr+D'1'
0069  307C  	MOVLW	LOW( label10 )
006A  286E  	GOTO	label7
006B  3000  	MOVLW	HIGH( label11 )
006C  00D1  	MOVWF __rom_get_00000_1_romAddr+D'1'
006D  3088  	MOVLW	LOW( label11 )
006E        label7
006E  07D0  	ADDWF __rom_get_00000_1_romAddr, F
006F  1803  	BTFSC STATUS,C
0070  0AD1  	INCF __rom_get_00000_1_romAddr+D'1', F
0071  0851  	MOVF __rom_get_00000_1_romAddr+D'1', W
0072  008A  	MOVWF PCLATH
0073  0850  	MOVF __rom_get_00000_1_romAddr, W
0074  0082  	MOVWF PCL
0075        label8
0075  3402  	RETLW 0x02
0076  3401  	RETLW 0x01
0077  3400  	RETLW 0x00
0078        label9
0078  3404  	RETLW 0x04
0079  3405  	RETLW 0x05
007A  3406  	RETLW 0x06
007B  3407  	RETLW 0x07
007C        label10
007C  3401  	RETLW 0x01
007D  3404  	RETLW 0x04
007E  3407  	RETLW 0x07
007F  340A  	RETLW 0x0A
0080  3402  	RETLW 0x02
0081  3405  	RETLW 0x05
0082  3408  	RETLW 0x08
0083  3400  	RETLW 0x00
0084  3403  	RETLW 0x03
0085  3406  	RETLW 0x06
0086  3409  	RETLW 0x09
0087  340B  	RETLW 0x0B
0088        label11
0088  3431  	RETLW 0x31
0089  3434  	RETLW 0x34
008A  3437  	RETLW 0x37
008B  342A  	RETLW 0x2A
008C  3432  	RETLW 0x32
008D  3435  	RETLW 0x35
008E  3438  	RETLW 0x38
008F  3430  	RETLW 0x30
0090  3433  	RETLW 0x33
0091  3436  	RETLW 0x36
0092  3439  	RETLW 0x39
0093  3423  	RETLW 0x23
0094        ; } __rom_get function end

0094        delay_s_00000
0094        ; { delay_s ; function begin
0094        label12
0094  30FA  	MOVLW 0xFA
0095  00CA  	MOVWF delay_ms_00000_arg_del
0096  2010  	CALL delay_ms_00000
0097  30FA  	MOVLW 0xFA
0098  00CA  	MOVWF delay_ms_00000_arg_del
0099  2010  	CALL delay_ms_00000
009A  30FA  	MOVLW 0xFA
009B  00CA  	MOVWF delay_ms_00000_arg_del
009C  2010  	CALL delay_ms_00000
009D  30FA  	MOVLW 0xFA
009E  00CA  	MOVWF delay_ms_00000_arg_del
009F  2010  	CALL delay_ms_00000
00A0  0BC6  	DECFSZ delay_s_00000_arg_del, F
00A1  2894  	GOTO	label12
00A2  0008  	RETURN
00A3        ; } delay_s function end

00A3        __mul_32u__0000F
00A3        ; { __mul_32u_32u ; function begin
00A3  01E0  	CLRF __mul_32u__0000F_1_i
00A4  01E1  	CLRF CompTempVarRet464
00A5  01E2  	CLRF CompTempVarRet464+D'1'
00A6  01E3  	CLRF CompTempVarRet464+D'2'
00A7  01E4  	CLRF CompTempVarRet464+D'3'
00A8        label13
00A8  1AE0  	BTFSC __mul_32u__0000F_1_i,5
00A9  0008  	RETURN
00AA  1C58  	BTFSS __mul_32u__0000F_arg_b,0
00AB  28BA  	GOTO	label14
00AC  0854  	MOVF __mul_32u__0000F_arg_a, W
00AD  07E1  	ADDWF CompTempVarRet464, F
00AE  0855  	MOVF __mul_32u__0000F_arg_a+D'1', W
00AF  1803  	BTFSC gbl_status,0
00B0  0F55  	INCFSZ __mul_32u__0000F_arg_a+D'1', W
00B1  07E2  	ADDWF CompTempVarRet464+D'1', F
00B2  0856  	MOVF __mul_32u__0000F_arg_a+D'2', W
00B3  1803  	BTFSC gbl_status,0
00B4  0F56  	INCFSZ __mul_32u__0000F_arg_a+D'2', W
00B5  07E3  	ADDWF CompTempVarRet464+D'2', F
00B6  0857  	MOVF __mul_32u__0000F_arg_a+D'3', W
00B7  1803  	BTFSC gbl_status,0
00B8  0F57  	INCFSZ __mul_32u__0000F_arg_a+D'3', W
00B9  07E4  	ADDWF CompTempVarRet464+D'3', F
00BA        label14
00BA  1003  	BCF gbl_status,0
00BB  0CDB  	RRF __mul_32u__0000F_arg_b+D'3', F
00BC  0CDA  	RRF __mul_32u__0000F_arg_b+D'2', F
00BD  0CD9  	RRF __mul_32u__0000F_arg_b+D'1', F
00BE  0CD8  	RRF __mul_32u__0000F_arg_b, F
00BF  1003  	BCF gbl_status,0
00C0  0DD4  	RLF __mul_32u__0000F_arg_a, F
00C1  0DD5  	RLF __mul_32u__0000F_arg_a+D'1', F
00C2  0DD6  	RLF __mul_32u__0000F_arg_a+D'2', F
00C3  0DD7  	RLF __mul_32u__0000F_arg_a+D'3', F
00C4  0AE0  	INCF __mul_32u__0000F_1_i, F
00C5  28A8  	GOTO	label13
00C6        ; } __mul_32u_32u function end

00C6        __div_32_3_00001
00C6        ; { __div_32_32 ; function begin
00C6  01DC  	CLRF __div_32_3_00001_1_r
00C7  01DD  	CLRF __div_32_3_00001_1_r+D'1'
00C8  01DE  	CLRF __div_32_3_00001_1_r+D'2'
00C9  01DF  	CLRF __div_32_3_00001_1_r+D'3'
00CA  01E1  	CLRF CompTempVarRet210
00CB  01E2  	CLRF CompTempVarRet210+D'1'
00CC  01E3  	CLRF CompTempVarRet210+D'2'
00CD  01E4  	CLRF CompTempVarRet210+D'3'
00CE  01E0  	CLRF __div_32_3_00001_1_i
00CF        label15
00CF  1AE0  	BTFSC __div_32_3_00001_1_i,5
00D0  0008  	RETURN
00D1  1003  	BCF STATUS,C
00D2  0DE1  	RLF CompTempVarRet210, F
00D3  0DE2  	RLF CompTempVarRet210+D'1', F
00D4  0DE3  	RLF CompTempVarRet210+D'2', F
00D5  0DE4  	RLF CompTempVarRet210+D'3', F
00D6  0DD4  	RLF __div_32_3_00001_arg_a, F
00D7  0DD5  	RLF __div_32_3_00001_arg_a+D'1', F
00D8  0DD6  	RLF __div_32_3_00001_arg_a+D'2', F
00D9  0DD7  	RLF __div_32_3_00001_arg_a+D'3', F
00DA  0DDC  	RLF __div_32_3_00001_1_r, F
00DB  0DDD  	RLF __div_32_3_00001_1_r+D'1', F
00DC  0DDE  	RLF __div_32_3_00001_1_r+D'2', F
00DD  0DDF  	RLF __div_32_3_00001_1_r+D'3', F
00DE  085B  	MOVF __div_32_3_00001_arg_b+D'3', W
00DF  025F  	SUBWF __div_32_3_00001_1_r+D'3', W
00E0  1D03  	BTFSS STATUS,Z
00E1  28EC  	GOTO	label16
00E2  085A  	MOVF __div_32_3_00001_arg_b+D'2', W
00E3  025E  	SUBWF __div_32_3_00001_1_r+D'2', W
00E4  1D03  	BTFSS STATUS,Z
00E5  28EC  	GOTO	label16
00E6  0859  	MOVF __div_32_3_00001_arg_b+D'1', W
00E7  025D  	SUBWF __div_32_3_00001_1_r+D'1', W
00E8  1D03  	BTFSS STATUS,Z
00E9  28EC  	GOTO	label16
00EA  0858  	MOVF __div_32_3_00001_arg_b, W
00EB  025C  	SUBWF __div_32_3_00001_1_r, W
00EC        label16
00EC  1C03  	BTFSS STATUS,C
00ED  28FD  	GOTO	label17
00EE  0858  	MOVF __div_32_3_00001_arg_b, W
00EF  02DC  	SUBWF __div_32_3_00001_1_r, F
00F0  0859  	MOVF __div_32_3_00001_arg_b+D'1', W
00F1  1C03  	BTFSS STATUS,C
00F2  0F59  	INCFSZ __div_32_3_00001_arg_b+D'1', W
00F3  02DD  	SUBWF __div_32_3_00001_1_r+D'1', F
00F4  085A  	MOVF __div_32_3_00001_arg_b+D'2', W
00F5  1C03  	BTFSS STATUS,C
00F6  0F5A  	INCFSZ __div_32_3_00001_arg_b+D'2', W
00F7  02DE  	SUBWF __div_32_3_00001_1_r+D'2', F
00F8  085B  	MOVF __div_32_3_00001_arg_b+D'3', W
00F9  1C03  	BTFSS STATUS,C
00FA  0F5B  	INCFSZ __div_32_3_00001_arg_b+D'3', W
00FB  02DF  	SUBWF __div_32_3_00001_1_r+D'3', F
00FC  1461  	BSF CompTempVarRet210,0
00FD        label17
00FD  0AE0  	INCF __div_32_3_00001_1_i, F
00FE  28CF  	GOTO	label15
00FF        ; } __div_32_32 function end


0135        __rem_32_3_00002
0135        ; { __rem_32_32 ; function begin
0135  01D3  	CLRF CompTempVarRet212
0136  01D4  	CLRF CompTempVarRet212+D'1'
0137  01D5  	CLRF CompTempVarRet212+D'2'
0138  01D6  	CLRF CompTempVarRet212+D'3'
0139  01CE  	CLRF __rem_32_3_00002_1_c
013A  01CF  	CLRF __rem_32_3_00002_1_c+D'1'
013B  01D0  	CLRF __rem_32_3_00002_1_c+D'2'
013C  01D1  	CLRF __rem_32_3_00002_1_c+D'3'
013D  01D2  	CLRF __rem_32_3_00002_1_i
013E        label21
013E  1AD2  	BTFSC __rem_32_3_00002_1_i,5
013F  0008  	RETURN
0140  1003  	BCF STATUS,C
0141  0DCE  	RLF __rem_32_3_00002_1_c, F
0142  0DCF  	RLF __rem_32_3_00002_1_c+D'1', F
0143  0DD0  	RLF __rem_32_3_00002_1_c+D'2', F
0144  0DD1  	RLF __rem_32_3_00002_1_c+D'3', F
0145  0DC6  	RLF __rem_32_3_00002_arg_a, F
0146  0DC7  	RLF __rem_32_3_00002_arg_a+D'1', F
0147  0DC8  	RLF __rem_32_3_00002_arg_a+D'2', F
0148  0DC9  	RLF __rem_32_3_00002_arg_a+D'3', F
0149  0DD3  	RLF CompTempVarRet212, F
014A  0DD4  	RLF CompTempVarRet212+D'1', F
014B  0DD5  	RLF CompTempVarRet212+D'2', F
014C  0DD6  	RLF CompTempVarRet212+D'3', F
014D  084D  	MOVF __rem_32_3_00002_arg_b+D'3', W
014E  0256  	SUBWF CompTempVarRet212+D'3', W
014F  1D03  	BTFSS STATUS,Z
0150  295B  	GOTO	label22
0151  084C  	MOVF __rem_32_3_00002_arg_b+D'2', W
0152  0255  	SUBWF CompTempVarRet212+D'2', W
0153  1D03  	BTFSS STATUS,Z
0154  295B  	GOTO	label22
0155  084B  	MOVF __rem_32_3_00002_arg_b+D'1', W
0156  0254  	SUBWF CompTempVarRet212+D'1', W
0157  1D03  	BTFSS STATUS,Z
0158  295B  	GOTO	label22
0159  084A  	MOVF __rem_32_3_00002_arg_b, W
015A  0253  	SUBWF CompTempVarRet212, W
015B        label22
015B  1C03  	BTFSS STATUS,C
015C  296C  	GOTO	label23
015D  084A  	MOVF __rem_32_3_00002_arg_b, W
015E  02D3  	SUBWF CompTempVarRet212, F
015F  084B  	MOVF __rem_32_3_00002_arg_b+D'1', W
0160  1C03  	BTFSS STATUS,C
0161  0F4B  	INCFSZ __rem_32_3_00002_arg_b+D'1', W
0162  02D4  	SUBWF CompTempVarRet212+D'1', F
0163  084C  	MOVF __rem_32_3_00002_arg_b+D'2', W
0164  1C03  	BTFSS STATUS,C
0165  0F4C  	INCFSZ __rem_32_3_00002_arg_b+D'2', W
0166  02D5  	SUBWF CompTempVarRet212+D'2', F
0167  084D  	MOVF __rem_32_3_00002_arg_b+D'3', W
0168  1C03  	BTFSS STATUS,C
0169  0F4D  	INCFSZ __rem_32_3_00002_arg_b+D'3', W
016A  02D6  	SUBWF CompTempVarRet212+D'3', F
016B  144E  	BSF __rem_32_3_00002_1_c,0
016C        label23
016C  0AD2  	INCF __rem_32_3_00002_1_i, F
016D  293E  	GOTO	label21
016E        ; } __rem_32_32 function end


0A79        _startup
0A79  30D5  	MOVLW 0xD5
0A7A  00F0  	MOVWF gbl_14_LSR
0A7B  30C4  	MOVLW 0xC4
0A7C  00F1  	MOVWF gbl_14_LSR+D'1'
0A7D  30BB  	MOVLW 0xBB
0A7E  00F2  	MOVWF gbl_14_LSR+D'2'
0A7F  30DC  	MOVLW 0xDC
0A80  00F3  	MOVWF gbl_14_LSR+D'3'
0A81  01F4  	CLRF gbl_15_gbl_aSig
0A82  01F5  	CLRF gbl_15_gbl_aSig+D'1'
0A83  01F6  	CLRF gbl_15_gbl_aSig+D'2'
0A84  01F7  	CLRF gbl_15_gbl_aSig+D'3'
0A85  01F8  	CLRF gbl_15_gbl_bSig
0A86  01F9  	CLRF gbl_15_gbl_bSig+D'1'
0A87  01FA  	CLRF gbl_15_gbl_bSig+D'2'
0A88  01FB  	CLRF gbl_15_gbl_bSig+D'3'
0A89  1683  	BSF STATUS, RP0
0A8A  1303  	BCF STATUS, RP1
0A8B  01A0  	CLRF gbl_15_gbl_zSig
0A8C  01A1  	CLRF gbl_15_gbl_zSig+D'1'
0A8D  01A2  	CLRF gbl_15_gbl_zSig+D'2'
0A8E  01A3  	CLRF gbl_15_gbl_zSig+D'3'
0A8F  01B7  	CLRF gbl_15_gbl_aExp
0A90  01B8  	CLRF gbl_15_gbl_bExp
0A91  01AC  	CLRF gbl_15_gbl_zExp
0A92  01AD  	CLRF gbl_15_gbl_zExp+D'1'
0A93  01B9  	CLRF gbl_15_gbl_aSign
0A94  01BA  	CLRF gbl_15_gbl_bSign
0A95  01BB  	CLRF gbl_15_gbl_zSign
0A96  01BC  	CLRF gbl_15_gbl_zSigZero
0A97  01A4  	CLRF gbl_15_gbl_ret
0A98  01A5  	CLRF gbl_15_gbl_ret+D'1'
0A99  01A6  	CLRF gbl_15_gbl_ret+D'2'
0A9A  01A7  	CLRF gbl_15_gbl_ret+D'3'
0A9B  01B5  	CLRF gbl_float_rounding_mode
0A9C  01B6  	CLRF gbl_float_exception_flags
0A9D  01B4  	CLRF gbl_float_detect_tininess

0AA6  158A  	BSF PCLATH,3
0AA7  120A  	BCF PCLATH,4
0AA8  2893  	GOTO	main

2007  3F7A  	DW 0x3F7A
